// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_milvus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_milvus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[77]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_milvus_2eproto;
namespace milvus {
namespace proto {
namespace milvus {
class AlterAliasRequest;
class AlterAliasRequestDefaultTypeInternal;
extern AlterAliasRequestDefaultTypeInternal _AlterAliasRequest_default_instance_;
class BoolResponse;
class BoolResponseDefaultTypeInternal;
extern BoolResponseDefaultTypeInternal _BoolResponse_default_instance_;
class CalcDistanceRequest;
class CalcDistanceRequestDefaultTypeInternal;
extern CalcDistanceRequestDefaultTypeInternal _CalcDistanceRequest_default_instance_;
class CalcDistanceResults;
class CalcDistanceResultsDefaultTypeInternal;
extern CalcDistanceResultsDefaultTypeInternal _CalcDistanceResults_default_instance_;
class CompactionMergeInfo;
class CompactionMergeInfoDefaultTypeInternal;
extern CompactionMergeInfoDefaultTypeInternal _CompactionMergeInfo_default_instance_;
class CreateAliasRequest;
class CreateAliasRequestDefaultTypeInternal;
extern CreateAliasRequestDefaultTypeInternal _CreateAliasRequest_default_instance_;
class CreateCollectionRequest;
class CreateCollectionRequestDefaultTypeInternal;
extern CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
class CreateIndexRequest;
class CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class CreatePartitionRequest;
class CreatePartitionRequestDefaultTypeInternal;
extern CreatePartitionRequestDefaultTypeInternal _CreatePartitionRequest_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DescribeCollectionRequest;
class DescribeCollectionRequestDefaultTypeInternal;
extern DescribeCollectionRequestDefaultTypeInternal _DescribeCollectionRequest_default_instance_;
class DescribeCollectionResponse;
class DescribeCollectionResponseDefaultTypeInternal;
extern DescribeCollectionResponseDefaultTypeInternal _DescribeCollectionResponse_default_instance_;
class DescribeIndexRequest;
class DescribeIndexRequestDefaultTypeInternal;
extern DescribeIndexRequestDefaultTypeInternal _DescribeIndexRequest_default_instance_;
class DescribeIndexResponse;
class DescribeIndexResponseDefaultTypeInternal;
extern DescribeIndexResponseDefaultTypeInternal _DescribeIndexResponse_default_instance_;
class DescribeSegmentRequest;
class DescribeSegmentRequestDefaultTypeInternal;
extern DescribeSegmentRequestDefaultTypeInternal _DescribeSegmentRequest_default_instance_;
class DescribeSegmentResponse;
class DescribeSegmentResponseDefaultTypeInternal;
extern DescribeSegmentResponseDefaultTypeInternal _DescribeSegmentResponse_default_instance_;
class DropAliasRequest;
class DropAliasRequestDefaultTypeInternal;
extern DropAliasRequestDefaultTypeInternal _DropAliasRequest_default_instance_;
class DropCollectionRequest;
class DropCollectionRequestDefaultTypeInternal;
extern DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
class DropIndexRequest;
class DropIndexRequestDefaultTypeInternal;
extern DropIndexRequestDefaultTypeInternal _DropIndexRequest_default_instance_;
class DropPartitionRequest;
class DropPartitionRequestDefaultTypeInternal;
extern DropPartitionRequestDefaultTypeInternal _DropPartitionRequest_default_instance_;
class DummyRequest;
class DummyRequestDefaultTypeInternal;
extern DummyRequestDefaultTypeInternal _DummyRequest_default_instance_;
class DummyResponse;
class DummyResponseDefaultTypeInternal;
extern DummyResponseDefaultTypeInternal _DummyResponse_default_instance_;
class FlushRequest;
class FlushRequestDefaultTypeInternal;
extern FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
class FlushResponse;
class FlushResponseDefaultTypeInternal;
extern FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
class FlushResponse_CollSegIDsEntry_DoNotUse;
class FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal;
extern FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal _FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_;
class GetCollectionStatisticsRequest;
class GetCollectionStatisticsRequestDefaultTypeInternal;
extern GetCollectionStatisticsRequestDefaultTypeInternal _GetCollectionStatisticsRequest_default_instance_;
class GetCollectionStatisticsResponse;
class GetCollectionStatisticsResponseDefaultTypeInternal;
extern GetCollectionStatisticsResponseDefaultTypeInternal _GetCollectionStatisticsResponse_default_instance_;
class GetCompactionPlansRequest;
class GetCompactionPlansRequestDefaultTypeInternal;
extern GetCompactionPlansRequestDefaultTypeInternal _GetCompactionPlansRequest_default_instance_;
class GetCompactionPlansResponse;
class GetCompactionPlansResponseDefaultTypeInternal;
extern GetCompactionPlansResponseDefaultTypeInternal _GetCompactionPlansResponse_default_instance_;
class GetCompactionStateRequest;
class GetCompactionStateRequestDefaultTypeInternal;
extern GetCompactionStateRequestDefaultTypeInternal _GetCompactionStateRequest_default_instance_;
class GetCompactionStateResponse;
class GetCompactionStateResponseDefaultTypeInternal;
extern GetCompactionStateResponseDefaultTypeInternal _GetCompactionStateResponse_default_instance_;
class GetFlushStateRequest;
class GetFlushStateRequestDefaultTypeInternal;
extern GetFlushStateRequestDefaultTypeInternal _GetFlushStateRequest_default_instance_;
class GetFlushStateResponse;
class GetFlushStateResponseDefaultTypeInternal;
extern GetFlushStateResponseDefaultTypeInternal _GetFlushStateResponse_default_instance_;
class GetIndexBuildProgressRequest;
class GetIndexBuildProgressRequestDefaultTypeInternal;
extern GetIndexBuildProgressRequestDefaultTypeInternal _GetIndexBuildProgressRequest_default_instance_;
class GetIndexBuildProgressResponse;
class GetIndexBuildProgressResponseDefaultTypeInternal;
extern GetIndexBuildProgressResponseDefaultTypeInternal _GetIndexBuildProgressResponse_default_instance_;
class GetIndexStateRequest;
class GetIndexStateRequestDefaultTypeInternal;
extern GetIndexStateRequestDefaultTypeInternal _GetIndexStateRequest_default_instance_;
class GetIndexStateResponse;
class GetIndexStateResponseDefaultTypeInternal;
extern GetIndexStateResponseDefaultTypeInternal _GetIndexStateResponse_default_instance_;
class GetMetricsRequest;
class GetMetricsRequestDefaultTypeInternal;
extern GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
class GetMetricsResponse;
class GetMetricsResponseDefaultTypeInternal;
extern GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
class GetPartitionStatisticsRequest;
class GetPartitionStatisticsRequestDefaultTypeInternal;
extern GetPartitionStatisticsRequestDefaultTypeInternal _GetPartitionStatisticsRequest_default_instance_;
class GetPartitionStatisticsResponse;
class GetPartitionStatisticsResponseDefaultTypeInternal;
extern GetPartitionStatisticsResponseDefaultTypeInternal _GetPartitionStatisticsResponse_default_instance_;
class GetPersistentSegmentInfoRequest;
class GetPersistentSegmentInfoRequestDefaultTypeInternal;
extern GetPersistentSegmentInfoRequestDefaultTypeInternal _GetPersistentSegmentInfoRequest_default_instance_;
class GetPersistentSegmentInfoResponse;
class GetPersistentSegmentInfoResponseDefaultTypeInternal;
extern GetPersistentSegmentInfoResponseDefaultTypeInternal _GetPersistentSegmentInfoResponse_default_instance_;
class GetQuerySegmentInfoRequest;
class GetQuerySegmentInfoRequestDefaultTypeInternal;
extern GetQuerySegmentInfoRequestDefaultTypeInternal _GetQuerySegmentInfoRequest_default_instance_;
class GetQuerySegmentInfoResponse;
class GetQuerySegmentInfoResponseDefaultTypeInternal;
extern GetQuerySegmentInfoResponseDefaultTypeInternal _GetQuerySegmentInfoResponse_default_instance_;
class HasCollectionRequest;
class HasCollectionRequestDefaultTypeInternal;
extern HasCollectionRequestDefaultTypeInternal _HasCollectionRequest_default_instance_;
class HasPartitionRequest;
class HasPartitionRequestDefaultTypeInternal;
extern HasPartitionRequestDefaultTypeInternal _HasPartitionRequest_default_instance_;
class Hits;
class HitsDefaultTypeInternal;
extern HitsDefaultTypeInternal _Hits_default_instance_;
class IndexDescription;
class IndexDescriptionDefaultTypeInternal;
extern IndexDescriptionDefaultTypeInternal _IndexDescription_default_instance_;
class InsertRequest;
class InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class LoadBalanceRequest;
class LoadBalanceRequestDefaultTypeInternal;
extern LoadBalanceRequestDefaultTypeInternal _LoadBalanceRequest_default_instance_;
class LoadCollectionRequest;
class LoadCollectionRequestDefaultTypeInternal;
extern LoadCollectionRequestDefaultTypeInternal _LoadCollectionRequest_default_instance_;
class LoadPartitionsRequest;
class LoadPartitionsRequestDefaultTypeInternal;
extern LoadPartitionsRequestDefaultTypeInternal _LoadPartitionsRequest_default_instance_;
class ManualCompactionRequest;
class ManualCompactionRequestDefaultTypeInternal;
extern ManualCompactionRequestDefaultTypeInternal _ManualCompactionRequest_default_instance_;
class ManualCompactionResponse;
class ManualCompactionResponseDefaultTypeInternal;
extern ManualCompactionResponseDefaultTypeInternal _ManualCompactionResponse_default_instance_;
class MutationResult;
class MutationResultDefaultTypeInternal;
extern MutationResultDefaultTypeInternal _MutationResult_default_instance_;
class PersistentSegmentInfo;
class PersistentSegmentInfoDefaultTypeInternal;
extern PersistentSegmentInfoDefaultTypeInternal _PersistentSegmentInfo_default_instance_;
class PlaceholderGroup;
class PlaceholderGroupDefaultTypeInternal;
extern PlaceholderGroupDefaultTypeInternal _PlaceholderGroup_default_instance_;
class PlaceholderValue;
class PlaceholderValueDefaultTypeInternal;
extern PlaceholderValueDefaultTypeInternal _PlaceholderValue_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResults;
class QueryResultsDefaultTypeInternal;
extern QueryResultsDefaultTypeInternal _QueryResults_default_instance_;
class QuerySegmentInfo;
class QuerySegmentInfoDefaultTypeInternal;
extern QuerySegmentInfoDefaultTypeInternal _QuerySegmentInfo_default_instance_;
class RegisterLinkRequest;
class RegisterLinkRequestDefaultTypeInternal;
extern RegisterLinkRequestDefaultTypeInternal _RegisterLinkRequest_default_instance_;
class RegisterLinkResponse;
class RegisterLinkResponseDefaultTypeInternal;
extern RegisterLinkResponseDefaultTypeInternal _RegisterLinkResponse_default_instance_;
class ReleaseCollectionRequest;
class ReleaseCollectionRequestDefaultTypeInternal;
extern ReleaseCollectionRequestDefaultTypeInternal _ReleaseCollectionRequest_default_instance_;
class ReleasePartitionsRequest;
class ReleasePartitionsRequestDefaultTypeInternal;
extern ReleasePartitionsRequestDefaultTypeInternal _ReleasePartitionsRequest_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResults;
class SearchResultsDefaultTypeInternal;
extern SearchResultsDefaultTypeInternal _SearchResults_default_instance_;
class ShowCollectionsRequest;
class ShowCollectionsRequestDefaultTypeInternal;
extern ShowCollectionsRequestDefaultTypeInternal _ShowCollectionsRequest_default_instance_;
class ShowCollectionsResponse;
class ShowCollectionsResponseDefaultTypeInternal;
extern ShowCollectionsResponseDefaultTypeInternal _ShowCollectionsResponse_default_instance_;
class ShowPartitionsRequest;
class ShowPartitionsRequestDefaultTypeInternal;
extern ShowPartitionsRequestDefaultTypeInternal _ShowPartitionsRequest_default_instance_;
class ShowPartitionsResponse;
class ShowPartitionsResponseDefaultTypeInternal;
extern ShowPartitionsResponseDefaultTypeInternal _ShowPartitionsResponse_default_instance_;
class ShowSegmentsRequest;
class ShowSegmentsRequestDefaultTypeInternal;
extern ShowSegmentsRequestDefaultTypeInternal _ShowSegmentsRequest_default_instance_;
class ShowSegmentsResponse;
class ShowSegmentsResponseDefaultTypeInternal;
extern ShowSegmentsResponseDefaultTypeInternal _ShowSegmentsResponse_default_instance_;
class StringResponse;
class StringResponseDefaultTypeInternal;
extern StringResponseDefaultTypeInternal _StringResponse_default_instance_;
class VectorIDs;
class VectorIDsDefaultTypeInternal;
extern VectorIDsDefaultTypeInternal _VectorIDs_default_instance_;
class VectorsArray;
class VectorsArrayDefaultTypeInternal;
extern VectorsArrayDefaultTypeInternal _VectorsArray_default_instance_;
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::milvus::AlterAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::AlterAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::BoolResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::BoolResponse>(Arena*);
template<> ::milvus::proto::milvus::CalcDistanceRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CalcDistanceRequest>(Arena*);
template<> ::milvus::proto::milvus::CalcDistanceResults* Arena::CreateMaybeMessage<::milvus::proto::milvus::CalcDistanceResults>(Arena*);
template<> ::milvus::proto::milvus::CompactionMergeInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::CompactionMergeInfo>(Arena*);
template<> ::milvus::proto::milvus::CreateAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateIndexRequest>(Arena*);
template<> ::milvus::proto::milvus::CreatePartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreatePartitionRequest>(Arena*);
template<> ::milvus::proto::milvus::DeleteRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DeleteRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeCollectionResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeCollectionResponse>(Arena*);
template<> ::milvus::proto::milvus::DescribeIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeIndexRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeIndexResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeIndexResponse>(Arena*);
template<> ::milvus::proto::milvus::DescribeSegmentRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeSegmentRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeSegmentResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeSegmentResponse>(Arena*);
template<> ::milvus::proto::milvus::DropAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::DropCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::DropIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropIndexRequest>(Arena*);
template<> ::milvus::proto::milvus::DropPartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropPartitionRequest>(Arena*);
template<> ::milvus::proto::milvus::DummyRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DummyRequest>(Arena*);
template<> ::milvus::proto::milvus::DummyResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DummyResponse>(Arena*);
template<> ::milvus::proto::milvus::FlushRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushRequest>(Arena*);
template<> ::milvus::proto::milvus::FlushResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushResponse>(Arena*);
template<> ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::GetCollectionStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCollectionStatisticsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetCollectionStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCollectionStatisticsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionPlansRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionPlansRequest>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionPlansResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionPlansResponse>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetFlushStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetFlushStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetFlushStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetFlushStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetIndexBuildProgressRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexBuildProgressRequest>(Arena*);
template<> ::milvus::proto::milvus::GetIndexBuildProgressResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexBuildProgressResponse>(Arena*);
template<> ::milvus::proto::milvus::GetIndexStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetIndexStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetMetricsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetMetricsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetMetricsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetMetricsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetPartitionStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPartitionStatisticsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetPartitionStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPartitionStatisticsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPersistentSegmentInfoRequest>(Arena*);
template<> ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPersistentSegmentInfoResponse>(Arena*);
template<> ::milvus::proto::milvus::GetQuerySegmentInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetQuerySegmentInfoRequest>(Arena*);
template<> ::milvus::proto::milvus::GetQuerySegmentInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetQuerySegmentInfoResponse>(Arena*);
template<> ::milvus::proto::milvus::HasCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::HasCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::HasPartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::HasPartitionRequest>(Arena*);
template<> ::milvus::proto::milvus::Hits* Arena::CreateMaybeMessage<::milvus::proto::milvus::Hits>(Arena*);
template<> ::milvus::proto::milvus::IndexDescription* Arena::CreateMaybeMessage<::milvus::proto::milvus::IndexDescription>(Arena*);
template<> ::milvus::proto::milvus::InsertRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::InsertRequest>(Arena*);
template<> ::milvus::proto::milvus::LoadBalanceRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::LoadBalanceRequest>(Arena*);
template<> ::milvus::proto::milvus::LoadCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::LoadCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::LoadPartitionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::LoadPartitionsRequest>(Arena*);
template<> ::milvus::proto::milvus::ManualCompactionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ManualCompactionRequest>(Arena*);
template<> ::milvus::proto::milvus::ManualCompactionResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ManualCompactionResponse>(Arena*);
template<> ::milvus::proto::milvus::MutationResult* Arena::CreateMaybeMessage<::milvus::proto::milvus::MutationResult>(Arena*);
template<> ::milvus::proto::milvus::PersistentSegmentInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::PersistentSegmentInfo>(Arena*);
template<> ::milvus::proto::milvus::PlaceholderGroup* Arena::CreateMaybeMessage<::milvus::proto::milvus::PlaceholderGroup>(Arena*);
template<> ::milvus::proto::milvus::PlaceholderValue* Arena::CreateMaybeMessage<::milvus::proto::milvus::PlaceholderValue>(Arena*);
template<> ::milvus::proto::milvus::QueryRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::QueryRequest>(Arena*);
template<> ::milvus::proto::milvus::QueryResults* Arena::CreateMaybeMessage<::milvus::proto::milvus::QueryResults>(Arena*);
template<> ::milvus::proto::milvus::QuerySegmentInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::QuerySegmentInfo>(Arena*);
template<> ::milvus::proto::milvus::RegisterLinkRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::RegisterLinkRequest>(Arena*);
template<> ::milvus::proto::milvus::RegisterLinkResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::RegisterLinkResponse>(Arena*);
template<> ::milvus::proto::milvus::ReleaseCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ReleaseCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::ReleasePartitionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ReleasePartitionsRequest>(Arena*);
template<> ::milvus::proto::milvus::SearchRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::SearchRequest>(Arena*);
template<> ::milvus::proto::milvus::SearchResults* Arena::CreateMaybeMessage<::milvus::proto::milvus::SearchResults>(Arena*);
template<> ::milvus::proto::milvus::ShowCollectionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowCollectionsRequest>(Arena*);
template<> ::milvus::proto::milvus::ShowCollectionsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowCollectionsResponse>(Arena*);
template<> ::milvus::proto::milvus::ShowPartitionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowPartitionsRequest>(Arena*);
template<> ::milvus::proto::milvus::ShowPartitionsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowPartitionsResponse>(Arena*);
template<> ::milvus::proto::milvus::ShowSegmentsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowSegmentsRequest>(Arena*);
template<> ::milvus::proto::milvus::ShowSegmentsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowSegmentsResponse>(Arena*);
template<> ::milvus::proto::milvus::StringResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::StringResponse>(Arena*);
template<> ::milvus::proto::milvus::VectorIDs* Arena::CreateMaybeMessage<::milvus::proto::milvus::VectorIDs>(Arena*);
template<> ::milvus::proto::milvus::VectorsArray* Arena::CreateMaybeMessage<::milvus::proto::milvus::VectorsArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace milvus {

enum ShowType : int {
  All = 0,
  InMemory = 1,
  ShowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShowType_IsValid(int value);
constexpr ShowType ShowType_MIN = All;
constexpr ShowType ShowType_MAX = InMemory;
constexpr int ShowType_ARRAYSIZE = ShowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowType_descriptor();
template<typename T>
inline const std::string& ShowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShowType_descriptor(), enum_t_value);
}
inline bool ShowType_Parse(
    const std::string& name, ShowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShowType>(
    ShowType_descriptor(), name, value);
}
enum PlaceholderType : int {
  None = 0,
  BinaryVector = 100,
  FloatVector = 101,
  PlaceholderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlaceholderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlaceholderType_IsValid(int value);
constexpr PlaceholderType PlaceholderType_MIN = None;
constexpr PlaceholderType PlaceholderType_MAX = FloatVector;
constexpr int PlaceholderType_ARRAYSIZE = PlaceholderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderType_descriptor();
template<typename T>
inline const std::string& PlaceholderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaceholderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaceholderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaceholderType_descriptor(), enum_t_value);
}
inline bool PlaceholderType_Parse(
    const std::string& name, PlaceholderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaceholderType>(
    PlaceholderType_descriptor(), name, value);
}
// ===================================================================

class CreateAliasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateAliasRequest) */ {
 public:
  CreateAliasRequest();
  virtual ~CreateAliasRequest();

  CreateAliasRequest(const CreateAliasRequest& from);
  CreateAliasRequest(CreateAliasRequest&& from) noexcept
    : CreateAliasRequest() {
    *this = ::std::move(from);
  }

  inline CreateAliasRequest& operator=(const CreateAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAliasRequest& operator=(CreateAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAliasRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAliasRequest*>(
               &_CreateAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAliasRequest& a, CreateAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAliasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAliasRequest* New() const final {
    return CreateMaybeMessage<CreateAliasRequest>(nullptr);
  }

  CreateAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAliasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAliasRequest& from);
  void MergeFrom(const CreateAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAliasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateAliasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateAliasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropAliasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropAliasRequest) */ {
 public:
  DropAliasRequest();
  virtual ~DropAliasRequest();

  DropAliasRequest(const DropAliasRequest& from);
  DropAliasRequest(DropAliasRequest&& from) noexcept
    : DropAliasRequest() {
    *this = ::std::move(from);
  }

  inline DropAliasRequest& operator=(const DropAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropAliasRequest& operator=(DropAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropAliasRequest* internal_default_instance() {
    return reinterpret_cast<const DropAliasRequest*>(
               &_DropAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DropAliasRequest& a, DropAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropAliasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropAliasRequest* New() const final {
    return CreateMaybeMessage<DropAliasRequest>(nullptr);
  }

  DropAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropAliasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropAliasRequest& from);
  void MergeFrom(const DropAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropAliasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropAliasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropAliasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class AlterAliasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.AlterAliasRequest) */ {
 public:
  AlterAliasRequest();
  virtual ~AlterAliasRequest();

  AlterAliasRequest(const AlterAliasRequest& from);
  AlterAliasRequest(AlterAliasRequest&& from) noexcept
    : AlterAliasRequest() {
    *this = ::std::move(from);
  }

  inline AlterAliasRequest& operator=(const AlterAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterAliasRequest& operator=(AlterAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlterAliasRequest* internal_default_instance() {
    return reinterpret_cast<const AlterAliasRequest*>(
               &_AlterAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlterAliasRequest& a, AlterAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterAliasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlterAliasRequest* New() const final {
    return CreateMaybeMessage<AlterAliasRequest>(nullptr);
  }

  AlterAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterAliasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterAliasRequest& from);
  void MergeFrom(const AlterAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterAliasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.AlterAliasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.AlterAliasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateCollectionRequest) */ {
 public:
  CreateCollectionRequest();
  virtual ~CreateCollectionRequest();

  CreateCollectionRequest(const CreateCollectionRequest& from);
  CreateCollectionRequest(CreateCollectionRequest&& from) noexcept
    : CreateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateCollectionRequest& operator=(const CreateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionRequest& operator=(CreateCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionRequest*>(
               &_CreateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateCollectionRequest& a, CreateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCollectionRequest* New() const final {
    return CreateMaybeMessage<CreateCollectionRequest>(nullptr);
  }

  CreateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCollectionRequest& from);
  void MergeFrom(const CreateCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kSchemaFieldNumber = 4,
    kBaseFieldNumber = 1,
    kShardsNumFieldNumber = 5,
    kConsistencyLevelFieldNumber = 6,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // bytes schema = 4;
  void clear_schema();
  const std::string& schema() const;
  void set_schema(const std::string& value);
  void set_schema(std::string&& value);
  void set_schema(const char* value);
  void set_schema(const void* value, size_t size);
  std::string* mutable_schema();
  std::string* release_schema();
  void set_allocated_schema(std::string* schema);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // int32 shards_num = 5;
  void clear_shards_num();
  ::PROTOBUF_NAMESPACE_ID::int32 shards_num() const;
  void set_shards_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
  void clear_consistency_level();
  ::milvus::proto::common::ConsistencyLevel consistency_level() const;
  void set_consistency_level(::milvus::proto::common::ConsistencyLevel value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int32 shards_num_;
  int consistency_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropCollectionRequest) */ {
 public:
  DropCollectionRequest();
  virtual ~DropCollectionRequest();

  DropCollectionRequest(const DropCollectionRequest& from);
  DropCollectionRequest(DropCollectionRequest&& from) noexcept
    : DropCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DropCollectionRequest& operator=(const DropCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCollectionRequest& operator=(DropCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DropCollectionRequest*>(
               &_DropCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DropCollectionRequest& a, DropCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCollectionRequest* New() const final {
    return CreateMaybeMessage<DropCollectionRequest>(nullptr);
  }

  DropCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCollectionRequest& from);
  void MergeFrom(const DropCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class HasCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.HasCollectionRequest) */ {
 public:
  HasCollectionRequest();
  virtual ~HasCollectionRequest();

  HasCollectionRequest(const HasCollectionRequest& from);
  HasCollectionRequest(HasCollectionRequest&& from) noexcept
    : HasCollectionRequest() {
    *this = ::std::move(from);
  }

  inline HasCollectionRequest& operator=(const HasCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasCollectionRequest& operator=(HasCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HasCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const HasCollectionRequest*>(
               &_HasCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HasCollectionRequest& a, HasCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HasCollectionRequest* New() const final {
    return CreateMaybeMessage<HasCollectionRequest>(nullptr);
  }

  HasCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HasCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HasCollectionRequest& from);
  void MergeFrom(const HasCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.HasCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kTimeStampFieldNumber = 4,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // uint64 time_stamp = 4;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.HasCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class BoolResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.BoolResponse) */ {
 public:
  BoolResponse();
  virtual ~BoolResponse();

  BoolResponse(const BoolResponse& from);
  BoolResponse(BoolResponse&& from) noexcept
    : BoolResponse() {
    *this = ::std::move(from);
  }

  inline BoolResponse& operator=(const BoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolResponse& operator=(BoolResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolResponse* internal_default_instance() {
    return reinterpret_cast<const BoolResponse*>(
               &_BoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BoolResponse& a, BoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolResponse* New() const final {
    return CreateMaybeMessage<BoolResponse>(nullptr);
  }

  BoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolResponse& from);
  void MergeFrom(const BoolResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.BoolResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // bool value = 2;
  void clear_value();
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.BoolResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class StringResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.StringResponse) */ {
 public:
  StringResponse();
  virtual ~StringResponse();

  StringResponse(const StringResponse& from);
  StringResponse(StringResponse&& from) noexcept
    : StringResponse() {
    *this = ::std::move(from);
  }

  inline StringResponse& operator=(const StringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringResponse& operator=(StringResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringResponse* internal_default_instance() {
    return reinterpret_cast<const StringResponse*>(
               &_StringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StringResponse& a, StringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StringResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringResponse* New() const final {
    return CreateMaybeMessage<StringResponse>(nullptr);
  }

  StringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringResponse& from);
  void MergeFrom(const StringResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.StringResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.StringResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeCollectionRequest) */ {
 public:
  DescribeCollectionRequest();
  virtual ~DescribeCollectionRequest();

  DescribeCollectionRequest(const DescribeCollectionRequest& from);
  DescribeCollectionRequest(DescribeCollectionRequest&& from) noexcept
    : DescribeCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DescribeCollectionRequest& operator=(const DescribeCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeCollectionRequest& operator=(DescribeCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeCollectionRequest*>(
               &_DescribeCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DescribeCollectionRequest& a, DescribeCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeCollectionRequest* New() const final {
    return CreateMaybeMessage<DescribeCollectionRequest>(nullptr);
  }

  DescribeCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeCollectionRequest& from);
  void MergeFrom(const DescribeCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 4,
    kTimeStampFieldNumber = 5,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // int64 collectionID = 4;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 time_stamp = 5;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeCollectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeCollectionResponse) */ {
 public:
  DescribeCollectionResponse();
  virtual ~DescribeCollectionResponse();

  DescribeCollectionResponse(const DescribeCollectionResponse& from);
  DescribeCollectionResponse(DescribeCollectionResponse&& from) noexcept
    : DescribeCollectionResponse() {
    *this = ::std::move(from);
  }

  inline DescribeCollectionResponse& operator=(const DescribeCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeCollectionResponse& operator=(DescribeCollectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeCollectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeCollectionResponse*>(
               &_DescribeCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DescribeCollectionResponse& a, DescribeCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeCollectionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeCollectionResponse* New() const final {
    return CreateMaybeMessage<DescribeCollectionResponse>(nullptr);
  }

  DescribeCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeCollectionResponse& from);
  void MergeFrom(const DescribeCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeCollectionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNamesFieldNumber = 4,
    kPhysicalChannelNamesFieldNumber = 5,
    kAliasesFieldNumber = 9,
    kStartPositionsFieldNumber = 10,
    kCollectionNameFieldNumber = 12,
    kStatusFieldNumber = 1,
    kSchemaFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
    kCreatedTimestampFieldNumber = 6,
    kCreatedUtcTimestampFieldNumber = 7,
    kShardsNumFieldNumber = 8,
    kConsistencyLevelFieldNumber = 11,
  };
  // repeated string virtual_channel_names = 4;
  int virtual_channel_names_size() const;
  void clear_virtual_channel_names();
  const std::string& virtual_channel_names(int index) const;
  std::string* mutable_virtual_channel_names(int index);
  void set_virtual_channel_names(int index, const std::string& value);
  void set_virtual_channel_names(int index, std::string&& value);
  void set_virtual_channel_names(int index, const char* value);
  void set_virtual_channel_names(int index, const char* value, size_t size);
  std::string* add_virtual_channel_names();
  void add_virtual_channel_names(const std::string& value);
  void add_virtual_channel_names(std::string&& value);
  void add_virtual_channel_names(const char* value);
  void add_virtual_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& virtual_channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_virtual_channel_names();

  // repeated string physical_channel_names = 5;
  int physical_channel_names_size() const;
  void clear_physical_channel_names();
  const std::string& physical_channel_names(int index) const;
  std::string* mutable_physical_channel_names(int index);
  void set_physical_channel_names(int index, const std::string& value);
  void set_physical_channel_names(int index, std::string&& value);
  void set_physical_channel_names(int index, const char* value);
  void set_physical_channel_names(int index, const char* value, size_t size);
  std::string* add_physical_channel_names();
  void add_physical_channel_names(const std::string& value);
  void add_physical_channel_names(std::string&& value);
  void add_physical_channel_names(const char* value);
  void add_physical_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& physical_channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_physical_channel_names();

  // repeated string aliases = 9;
  int aliases_size() const;
  void clear_aliases();
  const std::string& aliases(int index) const;
  std::string* mutable_aliases(int index);
  void set_aliases(int index, const std::string& value);
  void set_aliases(int index, std::string&& value);
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, size_t size);
  std::string* add_aliases();
  void add_aliases(const std::string& value);
  void add_aliases(std::string&& value);
  void add_aliases(const char* value);
  void add_aliases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aliases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aliases();

  // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
  int start_positions_size() const;
  void clear_start_positions();
  ::milvus::proto::common::KeyDataPair* mutable_start_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
      mutable_start_positions();
  const ::milvus::proto::common::KeyDataPair& start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* add_start_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
      start_positions() const;

  // string collection_name = 12;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // .milvus.proto.schema.CollectionSchema schema = 2;
  bool has_schema() const;
  void clear_schema();
  const ::milvus::proto::schema::CollectionSchema& schema() const;
  ::milvus::proto::schema::CollectionSchema* release_schema();
  ::milvus::proto::schema::CollectionSchema* mutable_schema();
  void set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema);

  // int64 collectionID = 3;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 created_timestamp = 6;
  void clear_created_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_timestamp() const;
  void set_created_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 created_utc_timestamp = 7;
  void clear_created_utc_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_utc_timestamp() const;
  void set_created_utc_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 shards_num = 8;
  void clear_shards_num();
  ::PROTOBUF_NAMESPACE_ID::int32 shards_num() const;
  void set_shards_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  void clear_consistency_level();
  ::milvus::proto::common::ConsistencyLevel consistency_level() const;
  void set_consistency_level(::milvus::proto::common::ConsistencyLevel value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeCollectionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> virtual_channel_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> physical_channel_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aliases_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair > start_positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::Status* status_;
  ::milvus::proto::schema::CollectionSchema* schema_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 created_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 created_utc_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 shards_num_;
  int consistency_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class LoadCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.LoadCollectionRequest) */ {
 public:
  LoadCollectionRequest();
  virtual ~LoadCollectionRequest();

  LoadCollectionRequest(const LoadCollectionRequest& from);
  LoadCollectionRequest(LoadCollectionRequest&& from) noexcept
    : LoadCollectionRequest() {
    *this = ::std::move(from);
  }

  inline LoadCollectionRequest& operator=(const LoadCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadCollectionRequest& operator=(LoadCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const LoadCollectionRequest*>(
               &_LoadCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoadCollectionRequest& a, LoadCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadCollectionRequest* New() const final {
    return CreateMaybeMessage<LoadCollectionRequest>(nullptr);
  }

  LoadCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadCollectionRequest& from);
  void MergeFrom(const LoadCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.LoadCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.LoadCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ReleaseCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ReleaseCollectionRequest) */ {
 public:
  ReleaseCollectionRequest();
  virtual ~ReleaseCollectionRequest();

  ReleaseCollectionRequest(const ReleaseCollectionRequest& from);
  ReleaseCollectionRequest(ReleaseCollectionRequest&& from) noexcept
    : ReleaseCollectionRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseCollectionRequest& operator=(const ReleaseCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseCollectionRequest& operator=(ReleaseCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseCollectionRequest*>(
               &_ReleaseCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReleaseCollectionRequest& a, ReleaseCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseCollectionRequest* New() const final {
    return CreateMaybeMessage<ReleaseCollectionRequest>(nullptr);
  }

  ReleaseCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseCollectionRequest& from);
  void MergeFrom(const ReleaseCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ReleaseCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ReleaseCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionStatisticsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCollectionStatisticsRequest) */ {
 public:
  GetCollectionStatisticsRequest();
  virtual ~GetCollectionStatisticsRequest();

  GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from);
  GetCollectionStatisticsRequest(GetCollectionStatisticsRequest&& from) noexcept
    : GetCollectionStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetCollectionStatisticsRequest& operator=(const GetCollectionStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionStatisticsRequest& operator=(GetCollectionStatisticsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollectionStatisticsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollectionStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCollectionStatisticsRequest*>(
               &_GetCollectionStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetCollectionStatisticsRequest& a, GetCollectionStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionStatisticsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCollectionStatisticsRequest* New() const final {
    return CreateMaybeMessage<GetCollectionStatisticsRequest>(nullptr);
  }

  GetCollectionStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollectionStatisticsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollectionStatisticsRequest& from);
  void MergeFrom(const GetCollectionStatisticsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionStatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCollectionStatisticsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCollectionStatisticsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionStatisticsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCollectionStatisticsResponse) */ {
 public:
  GetCollectionStatisticsResponse();
  virtual ~GetCollectionStatisticsResponse();

  GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from);
  GetCollectionStatisticsResponse(GetCollectionStatisticsResponse&& from) noexcept
    : GetCollectionStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetCollectionStatisticsResponse& operator=(const GetCollectionStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionStatisticsResponse& operator=(GetCollectionStatisticsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollectionStatisticsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollectionStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCollectionStatisticsResponse*>(
               &_GetCollectionStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetCollectionStatisticsResponse& a, GetCollectionStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionStatisticsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCollectionStatisticsResponse* New() const final {
    return CreateMaybeMessage<GetCollectionStatisticsResponse>(nullptr);
  }

  GetCollectionStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollectionStatisticsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollectionStatisticsResponse& from);
  void MergeFrom(const GetCollectionStatisticsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionStatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCollectionStatisticsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  int stats_size() const;
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCollectionStatisticsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowCollectionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowCollectionsRequest) */ {
 public:
  ShowCollectionsRequest();
  virtual ~ShowCollectionsRequest();

  ShowCollectionsRequest(const ShowCollectionsRequest& from);
  ShowCollectionsRequest(ShowCollectionsRequest&& from) noexcept
    : ShowCollectionsRequest() {
    *this = ::std::move(from);
  }

  inline ShowCollectionsRequest& operator=(const ShowCollectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowCollectionsRequest& operator=(ShowCollectionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowCollectionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCollectionsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowCollectionsRequest*>(
               &_ShowCollectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ShowCollectionsRequest& a, ShowCollectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowCollectionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowCollectionsRequest* New() const final {
    return CreateMaybeMessage<ShowCollectionsRequest>(nullptr);
  }

  ShowCollectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowCollectionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowCollectionsRequest& from);
  void MergeFrom(const ShowCollectionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCollectionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowCollectionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNamesFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kBaseFieldNumber = 1,
    kTimeStampFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated string collection_names = 5;
  int collection_names_size() const;
  void clear_collection_names();
  const std::string& collection_names(int index) const;
  std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const std::string& value);
  void set_collection_names(int index, std::string&& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  std::string* add_collection_names();
  void add_collection_names(const std::string& value);
  void add_collection_names(std::string&& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_names();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // uint64 time_stamp = 3;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .milvus.proto.milvus.ShowType type = 4;
  void clear_type();
  ::milvus::proto::milvus::ShowType type() const;
  void set_type(::milvus::proto::milvus::ShowType value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowCollectionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowCollectionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowCollectionsResponse) */ {
 public:
  ShowCollectionsResponse();
  virtual ~ShowCollectionsResponse();

  ShowCollectionsResponse(const ShowCollectionsResponse& from);
  ShowCollectionsResponse(ShowCollectionsResponse&& from) noexcept
    : ShowCollectionsResponse() {
    *this = ::std::move(from);
  }

  inline ShowCollectionsResponse& operator=(const ShowCollectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowCollectionsResponse& operator=(ShowCollectionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowCollectionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCollectionsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowCollectionsResponse*>(
               &_ShowCollectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShowCollectionsResponse& a, ShowCollectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowCollectionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowCollectionsResponse* New() const final {
    return CreateMaybeMessage<ShowCollectionsResponse>(nullptr);
  }

  ShowCollectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowCollectionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowCollectionsResponse& from);
  void MergeFrom(const ShowCollectionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCollectionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowCollectionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNamesFieldNumber = 2,
    kCollectionIdsFieldNumber = 3,
    kCreatedTimestampsFieldNumber = 4,
    kCreatedUtcTimestampsFieldNumber = 5,
    kInMemoryPercentagesFieldNumber = 6,
    kStatusFieldNumber = 1,
  };
  // repeated string collection_names = 2;
  int collection_names_size() const;
  void clear_collection_names();
  const std::string& collection_names(int index) const;
  std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const std::string& value);
  void set_collection_names(int index, std::string&& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  std::string* add_collection_names();
  void add_collection_names(const std::string& value);
  void add_collection_names(std::string&& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_names();

  // repeated int64 collection_ids = 3;
  int collection_ids_size() const;
  void clear_collection_ids();
  ::PROTOBUF_NAMESPACE_ID::int64 collection_ids(int index) const;
  void set_collection_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_collection_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      collection_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_collection_ids();

  // repeated uint64 created_timestamps = 4;
  int created_timestamps_size() const;
  void clear_created_timestamps();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_timestamps(int index) const;
  void set_created_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_created_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      created_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_created_timestamps();

  // repeated uint64 created_utc_timestamps = 5;
  int created_utc_timestamps_size() const;
  void clear_created_utc_timestamps();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_utc_timestamps(int index) const;
  void set_created_utc_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      created_utc_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_created_utc_timestamps();

  // repeated int64 inMemory_percentages = 6;
  int inmemory_percentages_size() const;
  void clear_inmemory_percentages();
  ::PROTOBUF_NAMESPACE_ID::int64 inmemory_percentages(int index) const;
  void set_inmemory_percentages(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      inmemory_percentages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_inmemory_percentages();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowCollectionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > collection_ids_;
  mutable std::atomic<int> _collection_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > created_timestamps_;
  mutable std::atomic<int> _created_timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > created_utc_timestamps_;
  mutable std::atomic<int> _created_utc_timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > inmemory_percentages_;
  mutable std::atomic<int> _inmemory_percentages_cached_byte_size_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreatePartitionRequest) */ {
 public:
  CreatePartitionRequest();
  virtual ~CreatePartitionRequest();

  CreatePartitionRequest(const CreatePartitionRequest& from);
  CreatePartitionRequest(CreatePartitionRequest&& from) noexcept
    : CreatePartitionRequest() {
    *this = ::std::move(from);
  }

  inline CreatePartitionRequest& operator=(const CreatePartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionRequest& operator=(CreatePartitionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePartitionRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionRequest*>(
               &_CreatePartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CreatePartitionRequest& a, CreatePartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePartitionRequest* New() const final {
    return CreateMaybeMessage<CreatePartitionRequest>(nullptr);
  }

  CreatePartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePartitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePartitionRequest& from);
  void MergeFrom(const CreatePartitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreatePartitionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreatePartitionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropPartitionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropPartitionRequest) */ {
 public:
  DropPartitionRequest();
  virtual ~DropPartitionRequest();

  DropPartitionRequest(const DropPartitionRequest& from);
  DropPartitionRequest(DropPartitionRequest&& from) noexcept
    : DropPartitionRequest() {
    *this = ::std::move(from);
  }

  inline DropPartitionRequest& operator=(const DropPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropPartitionRequest& operator=(DropPartitionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropPartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropPartitionRequest* internal_default_instance() {
    return reinterpret_cast<const DropPartitionRequest*>(
               &_DropPartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DropPartitionRequest& a, DropPartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropPartitionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropPartitionRequest* New() const final {
    return CreateMaybeMessage<DropPartitionRequest>(nullptr);
  }

  DropPartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropPartitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropPartitionRequest& from);
  void MergeFrom(const DropPartitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropPartitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropPartitionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropPartitionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class HasPartitionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.HasPartitionRequest) */ {
 public:
  HasPartitionRequest();
  virtual ~HasPartitionRequest();

  HasPartitionRequest(const HasPartitionRequest& from);
  HasPartitionRequest(HasPartitionRequest&& from) noexcept
    : HasPartitionRequest() {
    *this = ::std::move(from);
  }

  inline HasPartitionRequest& operator=(const HasPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasPartitionRequest& operator=(HasPartitionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HasPartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasPartitionRequest* internal_default_instance() {
    return reinterpret_cast<const HasPartitionRequest*>(
               &_HasPartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(HasPartitionRequest& a, HasPartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasPartitionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HasPartitionRequest* New() const final {
    return CreateMaybeMessage<HasPartitionRequest>(nullptr);
  }

  HasPartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HasPartitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HasPartitionRequest& from);
  void MergeFrom(const HasPartitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasPartitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.HasPartitionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.HasPartitionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class LoadPartitionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.LoadPartitionsRequest) */ {
 public:
  LoadPartitionsRequest();
  virtual ~LoadPartitionsRequest();

  LoadPartitionsRequest(const LoadPartitionsRequest& from);
  LoadPartitionsRequest(LoadPartitionsRequest&& from) noexcept
    : LoadPartitionsRequest() {
    *this = ::std::move(from);
  }

  inline LoadPartitionsRequest& operator=(const LoadPartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPartitionsRequest& operator=(LoadPartitionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPartitionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const LoadPartitionsRequest*>(
               &_LoadPartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LoadPartitionsRequest& a, LoadPartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPartitionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPartitionsRequest* New() const final {
    return CreateMaybeMessage<LoadPartitionsRequest>(nullptr);
  }

  LoadPartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPartitionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPartitionsRequest& from);
  void MergeFrom(const LoadPartitionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPartitionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.LoadPartitionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.LoadPartitionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ReleasePartitionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ReleasePartitionsRequest) */ {
 public:
  ReleasePartitionsRequest();
  virtual ~ReleasePartitionsRequest();

  ReleasePartitionsRequest(const ReleasePartitionsRequest& from);
  ReleasePartitionsRequest(ReleasePartitionsRequest&& from) noexcept
    : ReleasePartitionsRequest() {
    *this = ::std::move(from);
  }

  inline ReleasePartitionsRequest& operator=(const ReleasePartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleasePartitionsRequest& operator=(ReleasePartitionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleasePartitionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleasePartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const ReleasePartitionsRequest*>(
               &_ReleasePartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReleasePartitionsRequest& a, ReleasePartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleasePartitionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleasePartitionsRequest* New() const final {
    return CreateMaybeMessage<ReleasePartitionsRequest>(nullptr);
  }

  ReleasePartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleasePartitionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleasePartitionsRequest& from);
  void MergeFrom(const ReleasePartitionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleasePartitionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ReleasePartitionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ReleasePartitionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPartitionStatisticsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPartitionStatisticsRequest) */ {
 public:
  GetPartitionStatisticsRequest();
  virtual ~GetPartitionStatisticsRequest();

  GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from);
  GetPartitionStatisticsRequest(GetPartitionStatisticsRequest&& from) noexcept
    : GetPartitionStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetPartitionStatisticsRequest& operator=(const GetPartitionStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPartitionStatisticsRequest& operator=(GetPartitionStatisticsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPartitionStatisticsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPartitionStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPartitionStatisticsRequest*>(
               &_GetPartitionStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetPartitionStatisticsRequest& a, GetPartitionStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPartitionStatisticsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPartitionStatisticsRequest* New() const final {
    return CreateMaybeMessage<GetPartitionStatisticsRequest>(nullptr);
  }

  GetPartitionStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPartitionStatisticsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPartitionStatisticsRequest& from);
  void MergeFrom(const GetPartitionStatisticsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPartitionStatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPartitionStatisticsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPartitionStatisticsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPartitionStatisticsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPartitionStatisticsResponse) */ {
 public:
  GetPartitionStatisticsResponse();
  virtual ~GetPartitionStatisticsResponse();

  GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from);
  GetPartitionStatisticsResponse(GetPartitionStatisticsResponse&& from) noexcept
    : GetPartitionStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetPartitionStatisticsResponse& operator=(const GetPartitionStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPartitionStatisticsResponse& operator=(GetPartitionStatisticsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPartitionStatisticsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPartitionStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPartitionStatisticsResponse*>(
               &_GetPartitionStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetPartitionStatisticsResponse& a, GetPartitionStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPartitionStatisticsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPartitionStatisticsResponse* New() const final {
    return CreateMaybeMessage<GetPartitionStatisticsResponse>(nullptr);
  }

  GetPartitionStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPartitionStatisticsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPartitionStatisticsResponse& from);
  void MergeFrom(const GetPartitionStatisticsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPartitionStatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPartitionStatisticsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  int stats_size() const;
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPartitionStatisticsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowPartitionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowPartitionsRequest) */ {
 public:
  ShowPartitionsRequest();
  virtual ~ShowPartitionsRequest();

  ShowPartitionsRequest(const ShowPartitionsRequest& from);
  ShowPartitionsRequest(ShowPartitionsRequest&& from) noexcept
    : ShowPartitionsRequest() {
    *this = ::std::move(from);
  }

  inline ShowPartitionsRequest& operator=(const ShowPartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowPartitionsRequest& operator=(ShowPartitionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowPartitionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowPartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowPartitionsRequest*>(
               &_ShowPartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ShowPartitionsRequest& a, ShowPartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowPartitionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowPartitionsRequest* New() const final {
    return CreateMaybeMessage<ShowPartitionsRequest>(nullptr);
  }

  ShowPartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowPartitionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowPartitionsRequest& from);
  void MergeFrom(const ShowPartitionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowPartitionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowPartitionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // repeated string partition_names = 5;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // int64 collectionID = 4;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.milvus.ShowType type = 6;
  void clear_type();
  ::milvus::proto::milvus::ShowType type() const;
  void set_type(::milvus::proto::milvus::ShowType value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowPartitionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowPartitionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowPartitionsResponse) */ {
 public:
  ShowPartitionsResponse();
  virtual ~ShowPartitionsResponse();

  ShowPartitionsResponse(const ShowPartitionsResponse& from);
  ShowPartitionsResponse(ShowPartitionsResponse&& from) noexcept
    : ShowPartitionsResponse() {
    *this = ::std::move(from);
  }

  inline ShowPartitionsResponse& operator=(const ShowPartitionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowPartitionsResponse& operator=(ShowPartitionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowPartitionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowPartitionsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowPartitionsResponse*>(
               &_ShowPartitionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ShowPartitionsResponse& a, ShowPartitionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowPartitionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowPartitionsResponse* New() const final {
    return CreateMaybeMessage<ShowPartitionsResponse>(nullptr);
  }

  ShowPartitionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowPartitionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowPartitionsResponse& from);
  void MergeFrom(const ShowPartitionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowPartitionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowPartitionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 2,
    kPartitionIDsFieldNumber = 3,
    kCreatedTimestampsFieldNumber = 4,
    kCreatedUtcTimestampsFieldNumber = 5,
    kInMemoryPercentagesFieldNumber = 6,
    kStatusFieldNumber = 1,
  };
  // repeated string partition_names = 2;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // repeated int64 partitionIDs = 3;
  int partitionids_size() const;
  void clear_partitionids();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionids(int index) const;
  void set_partitionids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_partitionids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_partitionids();

  // repeated uint64 created_timestamps = 4;
  int created_timestamps_size() const;
  void clear_created_timestamps();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_timestamps(int index) const;
  void set_created_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_created_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      created_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_created_timestamps();

  // repeated uint64 created_utc_timestamps = 5;
  int created_utc_timestamps_size() const;
  void clear_created_utc_timestamps();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_utc_timestamps(int index) const;
  void set_created_utc_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      created_utc_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_created_utc_timestamps();

  // repeated int64 inMemory_percentages = 6;
  int inmemory_percentages_size() const;
  void clear_inmemory_percentages();
  ::PROTOBUF_NAMESPACE_ID::int64 inmemory_percentages(int index) const;
  void set_inmemory_percentages(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      inmemory_percentages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_inmemory_percentages();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowPartitionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > partitionids_;
  mutable std::atomic<int> _partitionids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > created_timestamps_;
  mutable std::atomic<int> _created_timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > created_utc_timestamps_;
  mutable std::atomic<int> _created_utc_timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > inmemory_percentages_;
  mutable std::atomic<int> _inmemory_percentages_cached_byte_size_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeSegmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeSegmentRequest) */ {
 public:
  DescribeSegmentRequest();
  virtual ~DescribeSegmentRequest();

  DescribeSegmentRequest(const DescribeSegmentRequest& from);
  DescribeSegmentRequest(DescribeSegmentRequest&& from) noexcept
    : DescribeSegmentRequest() {
    *this = ::std::move(from);
  }

  inline DescribeSegmentRequest& operator=(const DescribeSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeSegmentRequest& operator=(DescribeSegmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeSegmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeSegmentRequest*>(
               &_DescribeSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DescribeSegmentRequest& a, DescribeSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeSegmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeSegmentRequest* New() const final {
    return CreateMaybeMessage<DescribeSegmentRequest>(nullptr);
  }

  DescribeSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeSegmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeSegmentRequest& from);
  void MergeFrom(const DescribeSegmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeSegmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeSegmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kSegmentIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // int64 collectionID = 2;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 segmentID = 3;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeSegmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeSegmentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeSegmentResponse) */ {
 public:
  DescribeSegmentResponse();
  virtual ~DescribeSegmentResponse();

  DescribeSegmentResponse(const DescribeSegmentResponse& from);
  DescribeSegmentResponse(DescribeSegmentResponse&& from) noexcept
    : DescribeSegmentResponse() {
    *this = ::std::move(from);
  }

  inline DescribeSegmentResponse& operator=(const DescribeSegmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeSegmentResponse& operator=(DescribeSegmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeSegmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeSegmentResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeSegmentResponse*>(
               &_DescribeSegmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DescribeSegmentResponse& a, DescribeSegmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeSegmentResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeSegmentResponse* New() const final {
    return CreateMaybeMessage<DescribeSegmentResponse>(nullptr);
  }

  DescribeSegmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeSegmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeSegmentResponse& from);
  void MergeFrom(const DescribeSegmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeSegmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeSegmentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexIDFieldNumber = 2,
    kBuildIDFieldNumber = 3,
    kFieldIDFieldNumber = 5,
    kEnableIndexFieldNumber = 4,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 indexID = 2;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 buildID = 3;
  void clear_buildid();
  ::PROTOBUF_NAMESPACE_ID::int64 buildid() const;
  void set_buildid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 fieldID = 5;
  void clear_fieldid();
  ::PROTOBUF_NAMESPACE_ID::int64 fieldid() const;
  void set_fieldid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool enable_index = 4;
  void clear_enable_index();
  bool enable_index() const;
  void set_enable_index(bool value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeSegmentResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  ::PROTOBUF_NAMESPACE_ID::int64 buildid_;
  ::PROTOBUF_NAMESPACE_ID::int64 fieldid_;
  bool enable_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowSegmentsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowSegmentsRequest) */ {
 public:
  ShowSegmentsRequest();
  virtual ~ShowSegmentsRequest();

  ShowSegmentsRequest(const ShowSegmentsRequest& from);
  ShowSegmentsRequest(ShowSegmentsRequest&& from) noexcept
    : ShowSegmentsRequest() {
    *this = ::std::move(from);
  }

  inline ShowSegmentsRequest& operator=(const ShowSegmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSegmentsRequest& operator=(ShowSegmentsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowSegmentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowSegmentsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowSegmentsRequest*>(
               &_ShowSegmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ShowSegmentsRequest& a, ShowSegmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSegmentsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowSegmentsRequest* New() const final {
    return CreateMaybeMessage<ShowSegmentsRequest>(nullptr);
  }

  ShowSegmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowSegmentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowSegmentsRequest& from);
  void MergeFrom(const ShowSegmentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSegmentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowSegmentsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // int64 collectionID = 2;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 partitionID = 3;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowSegmentsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowSegmentsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowSegmentsResponse) */ {
 public:
  ShowSegmentsResponse();
  virtual ~ShowSegmentsResponse();

  ShowSegmentsResponse(const ShowSegmentsResponse& from);
  ShowSegmentsResponse(ShowSegmentsResponse&& from) noexcept
    : ShowSegmentsResponse() {
    *this = ::std::move(from);
  }

  inline ShowSegmentsResponse& operator=(const ShowSegmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSegmentsResponse& operator=(ShowSegmentsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowSegmentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowSegmentsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowSegmentsResponse*>(
               &_ShowSegmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ShowSegmentsResponse& a, ShowSegmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSegmentsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowSegmentsResponse* New() const final {
    return CreateMaybeMessage<ShowSegmentsResponse>(nullptr);
  }

  ShowSegmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowSegmentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowSegmentsResponse& from);
  void MergeFrom(const ShowSegmentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSegmentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowSegmentsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 2;
  int segmentids_size() const;
  void clear_segmentids();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentids(int index) const;
  void set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_segmentids();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowSegmentsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > segmentids_;
  mutable std::atomic<int> _segmentids_cached_byte_size_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateIndexRequest) */ {
 public:
  CreateIndexRequest();
  virtual ~CreateIndexRequest();

  CreateIndexRequest(const CreateIndexRequest& from);
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIndexRequest* New() const final {
    return CreateMaybeMessage<CreateIndexRequest>(nullptr);
  }

  CreateIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIndexRequest& from);
  void MergeFrom(const CreateIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraParamsFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  ::milvus::proto::common::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_extra_params();
  const ::milvus::proto::common::KeyValuePair& extra_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      extra_params() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > extra_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeIndexRequest) */ {
 public:
  DescribeIndexRequest();
  virtual ~DescribeIndexRequest();

  DescribeIndexRequest(const DescribeIndexRequest& from);
  DescribeIndexRequest(DescribeIndexRequest&& from) noexcept
    : DescribeIndexRequest() {
    *this = ::std::move(from);
  }

  inline DescribeIndexRequest& operator=(const DescribeIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeIndexRequest& operator=(DescribeIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeIndexRequest*>(
               &_DescribeIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DescribeIndexRequest& a, DescribeIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeIndexRequest* New() const final {
    return CreateMaybeMessage<DescribeIndexRequest>(nullptr);
  }

  DescribeIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeIndexRequest& from);
  void MergeFrom(const DescribeIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class IndexDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.IndexDescription) */ {
 public:
  IndexDescription();
  virtual ~IndexDescription();

  IndexDescription(const IndexDescription& from);
  IndexDescription(IndexDescription&& from) noexcept
    : IndexDescription() {
    *this = ::std::move(from);
  }

  inline IndexDescription& operator=(const IndexDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexDescription& operator=(IndexDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexDescription* internal_default_instance() {
    return reinterpret_cast<const IndexDescription*>(
               &_IndexDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(IndexDescription& a, IndexDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexDescription* New() const final {
    return CreateMaybeMessage<IndexDescription>(nullptr);
  }

  IndexDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexDescription& from);
  void MergeFrom(const IndexDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.IndexDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kIndexNameFieldNumber = 1,
    kFieldNameFieldNumber = 4,
    kIndexIDFieldNumber = 2,
  };
  // repeated .milvus.proto.common.KeyValuePair params = 3;
  int params_size() const;
  void clear_params();
  ::milvus::proto::common::KeyValuePair* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_params();
  const ::milvus::proto::common::KeyValuePair& params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      params() const;

  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // int64 indexID = 2;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.IndexDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeIndexResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeIndexResponse) */ {
 public:
  DescribeIndexResponse();
  virtual ~DescribeIndexResponse();

  DescribeIndexResponse(const DescribeIndexResponse& from);
  DescribeIndexResponse(DescribeIndexResponse&& from) noexcept
    : DescribeIndexResponse() {
    *this = ::std::move(from);
  }

  inline DescribeIndexResponse& operator=(const DescribeIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeIndexResponse& operator=(DescribeIndexResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeIndexResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeIndexResponse*>(
               &_DescribeIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DescribeIndexResponse& a, DescribeIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeIndexResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeIndexResponse* New() const final {
    return CreateMaybeMessage<DescribeIndexResponse>(nullptr);
  }

  DescribeIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeIndexResponse& from);
  void MergeFrom(const DescribeIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeIndexResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexDescriptionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  int index_descriptions_size() const;
  void clear_index_descriptions();
  ::milvus::proto::milvus::IndexDescription* mutable_index_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >*
      mutable_index_descriptions();
  const ::milvus::proto::milvus::IndexDescription& index_descriptions(int index) const;
  ::milvus::proto::milvus::IndexDescription* add_index_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >&
      index_descriptions() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeIndexResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription > index_descriptions_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexBuildProgressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexBuildProgressRequest) */ {
 public:
  GetIndexBuildProgressRequest();
  virtual ~GetIndexBuildProgressRequest();

  GetIndexBuildProgressRequest(const GetIndexBuildProgressRequest& from);
  GetIndexBuildProgressRequest(GetIndexBuildProgressRequest&& from) noexcept
    : GetIndexBuildProgressRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexBuildProgressRequest& operator=(const GetIndexBuildProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexBuildProgressRequest& operator=(GetIndexBuildProgressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexBuildProgressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexBuildProgressRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexBuildProgressRequest*>(
               &_GetIndexBuildProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetIndexBuildProgressRequest& a, GetIndexBuildProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexBuildProgressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexBuildProgressRequest* New() const final {
    return CreateMaybeMessage<GetIndexBuildProgressRequest>(nullptr);
  }

  GetIndexBuildProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexBuildProgressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexBuildProgressRequest& from);
  void MergeFrom(const GetIndexBuildProgressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexBuildProgressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexBuildProgressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexBuildProgressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexBuildProgressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexBuildProgressResponse) */ {
 public:
  GetIndexBuildProgressResponse();
  virtual ~GetIndexBuildProgressResponse();

  GetIndexBuildProgressResponse(const GetIndexBuildProgressResponse& from);
  GetIndexBuildProgressResponse(GetIndexBuildProgressResponse&& from) noexcept
    : GetIndexBuildProgressResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexBuildProgressResponse& operator=(const GetIndexBuildProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexBuildProgressResponse& operator=(GetIndexBuildProgressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexBuildProgressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexBuildProgressResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexBuildProgressResponse*>(
               &_GetIndexBuildProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetIndexBuildProgressResponse& a, GetIndexBuildProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexBuildProgressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexBuildProgressResponse* New() const final {
    return CreateMaybeMessage<GetIndexBuildProgressResponse>(nullptr);
  }

  GetIndexBuildProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexBuildProgressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexBuildProgressResponse& from);
  void MergeFrom(const GetIndexBuildProgressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexBuildProgressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexBuildProgressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexedRowsFieldNumber = 2,
    kTotalRowsFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 indexed_rows = 2;
  void clear_indexed_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 indexed_rows() const;
  void set_indexed_rows(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 total_rows = 3;
  void clear_total_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 total_rows() const;
  void set_total_rows(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexBuildProgressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexed_rows_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexStateRequest) */ {
 public:
  GetIndexStateRequest();
  virtual ~GetIndexStateRequest();

  GetIndexStateRequest(const GetIndexStateRequest& from);
  GetIndexStateRequest(GetIndexStateRequest&& from) noexcept
    : GetIndexStateRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexStateRequest& operator=(const GetIndexStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStateRequest& operator=(GetIndexStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexStateRequest*>(
               &_GetIndexStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetIndexStateRequest& a, GetIndexStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexStateRequest* New() const final {
    return CreateMaybeMessage<GetIndexStateRequest>(nullptr);
  }

  GetIndexStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexStateRequest& from);
  void MergeFrom(const GetIndexStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexStateResponse) */ {
 public:
  GetIndexStateResponse();
  virtual ~GetIndexStateResponse();

  GetIndexStateResponse(const GetIndexStateResponse& from);
  GetIndexStateResponse(GetIndexStateResponse&& from) noexcept
    : GetIndexStateResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexStateResponse& operator=(const GetIndexStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStateResponse& operator=(GetIndexStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexStateResponse*>(
               &_GetIndexStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetIndexStateResponse& a, GetIndexStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexStateResponse* New() const final {
    return CreateMaybeMessage<GetIndexStateResponse>(nullptr);
  }

  GetIndexStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexStateResponse& from);
  void MergeFrom(const GetIndexStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailReasonFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string fail_reason = 3;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  void set_fail_reason(const std::string& value);
  void set_fail_reason(std::string&& value);
  void set_fail_reason(const char* value);
  void set_fail_reason(const char* value, size_t size);
  std::string* mutable_fail_reason();
  std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // .milvus.proto.common.IndexState state = 2;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
  ::milvus::proto::common::Status* status_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropIndexRequest) */ {
 public:
  DropIndexRequest();
  virtual ~DropIndexRequest();

  DropIndexRequest(const DropIndexRequest& from);
  DropIndexRequest(DropIndexRequest&& from) noexcept
    : DropIndexRequest() {
    *this = ::std::move(from);
  }

  inline DropIndexRequest& operator=(const DropIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropIndexRequest& operator=(DropIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DropIndexRequest*>(
               &_DropIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DropIndexRequest& a, DropIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropIndexRequest* New() const final {
    return CreateMaybeMessage<DropIndexRequest>(nullptr);
  }

  DropIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropIndexRequest& from);
  void MergeFrom(const DropIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class InsertRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.InsertRequest) */ {
 public:
  InsertRequest();
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertRequest* New() const final {
    return CreateMaybeMessage<InsertRequest>(nullptr);
  }

  InsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.InsertRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 5,
    kHashKeysFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kNumRowsFieldNumber = 7,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  int fields_data_size() const;
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // repeated uint32 hash_keys = 6;
  int hash_keys_size() const;
  void clear_hash_keys();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_keys(int index) const;
  void set_hash_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hash_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hash_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hash_keys();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // uint32 num_rows = 7;
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.InsertRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hash_keys_;
  mutable std::atomic<int> _hash_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class MutationResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.MutationResult) */ {
 public:
  MutationResult();
  virtual ~MutationResult();

  MutationResult(const MutationResult& from);
  MutationResult(MutationResult&& from) noexcept
    : MutationResult() {
    *this = ::std::move(from);
  }

  inline MutationResult& operator=(const MutationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutationResult& operator=(MutationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutationResult* internal_default_instance() {
    return reinterpret_cast<const MutationResult*>(
               &_MutationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MutationResult& a, MutationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MutationResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutationResult* New() const final {
    return CreateMaybeMessage<MutationResult>(nullptr);
  }

  MutationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutationResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutationResult& from);
  void MergeFrom(const MutationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutationResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.MutationResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccIndexFieldNumber = 3,
    kErrIndexFieldNumber = 4,
    kStatusFieldNumber = 1,
    kIDsFieldNumber = 2,
    kInsertCntFieldNumber = 6,
    kDeleteCntFieldNumber = 7,
    kUpsertCntFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kAcknowledgedFieldNumber = 5,
  };
  // repeated uint32 succ_index = 3;
  int succ_index_size() const;
  void clear_succ_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 succ_index(int index) const;
  void set_succ_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_succ_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      succ_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_succ_index();

  // repeated uint32 err_index = 4;
  int err_index_size() const;
  void clear_err_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_index(int index) const;
  void set_err_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_err_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      err_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_err_index();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // .milvus.proto.schema.IDs IDs = 2;
  bool has_ids() const;
  void clear_ids();
  const ::milvus::proto::schema::IDs& ids() const;
  ::milvus::proto::schema::IDs* release_ids();
  ::milvus::proto::schema::IDs* mutable_ids();
  void set_allocated_ids(::milvus::proto::schema::IDs* ids);

  // int64 insert_cnt = 6;
  void clear_insert_cnt();
  ::PROTOBUF_NAMESPACE_ID::int64 insert_cnt() const;
  void set_insert_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 delete_cnt = 7;
  void clear_delete_cnt();
  ::PROTOBUF_NAMESPACE_ID::int64 delete_cnt() const;
  void set_delete_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 upsert_cnt = 8;
  void clear_upsert_cnt();
  ::PROTOBUF_NAMESPACE_ID::int64 upsert_cnt() const;
  void set_upsert_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 timestamp = 9;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool acknowledged = 5;
  void clear_acknowledged();
  bool acknowledged() const;
  void set_acknowledged(bool value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.MutationResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > succ_index_;
  mutable std::atomic<int> _succ_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > err_index_;
  mutable std::atomic<int> _err_index_cached_byte_size_;
  ::milvus::proto::common::Status* status_;
  ::milvus::proto::schema::IDs* ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 insert_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int64 delete_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int64 upsert_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  bool acknowledged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashKeysFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kExprFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // repeated uint32 hash_keys = 6;
  int hash_keys_size() const;
  void clear_hash_keys();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_keys(int index) const;
  void set_hash_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hash_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hash_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hash_keys();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // string expr = 5;
  void clear_expr();
  const std::string& expr() const;
  void set_expr(const std::string& value);
  void set_expr(std::string&& value);
  void set_expr(const char* value);
  void set_expr(const char* value, size_t size);
  std::string* mutable_expr();
  std::string* release_expr();
  void set_allocated_expr(std::string* expr);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DeleteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hash_keys_;
  mutable std::atomic<int> _hash_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.PlaceholderValue) */ {
 public:
  PlaceholderValue();
  virtual ~PlaceholderValue();

  PlaceholderValue(const PlaceholderValue& from);
  PlaceholderValue(PlaceholderValue&& from) noexcept
    : PlaceholderValue() {
    *this = ::std::move(from);
  }

  inline PlaceholderValue& operator=(const PlaceholderValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderValue& operator=(PlaceholderValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceholderValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceholderValue* internal_default_instance() {
    return reinterpret_cast<const PlaceholderValue*>(
               &_PlaceholderValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PlaceholderValue& a, PlaceholderValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderValue* New() const final {
    return CreateMaybeMessage<PlaceholderValue>(nullptr);
  }

  PlaceholderValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderValue& from);
  void MergeFrom(const PlaceholderValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.PlaceholderValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kTagFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated bytes values = 3;
  int values_size() const;
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();

  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // .milvus.proto.milvus.PlaceholderType type = 2;
  void clear_type();
  ::milvus::proto::milvus::PlaceholderType type() const;
  void set_type(::milvus::proto::milvus::PlaceholderType value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.PlaceholderValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.PlaceholderGroup) */ {
 public:
  PlaceholderGroup();
  virtual ~PlaceholderGroup();

  PlaceholderGroup(const PlaceholderGroup& from);
  PlaceholderGroup(PlaceholderGroup&& from) noexcept
    : PlaceholderGroup() {
    *this = ::std::move(from);
  }

  inline PlaceholderGroup& operator=(const PlaceholderGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderGroup& operator=(PlaceholderGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceholderGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceholderGroup* internal_default_instance() {
    return reinterpret_cast<const PlaceholderGroup*>(
               &_PlaceholderGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PlaceholderGroup& a, PlaceholderGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderGroup* New() const final {
    return CreateMaybeMessage<PlaceholderGroup>(nullptr);
  }

  PlaceholderGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderGroup& from);
  void MergeFrom(const PlaceholderGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.PlaceholderGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholdersFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
  int placeholders_size() const;
  void clear_placeholders();
  ::milvus::proto::milvus::PlaceholderValue* mutable_placeholders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PlaceholderValue >*
      mutable_placeholders();
  const ::milvus::proto::milvus::PlaceholderValue& placeholders(int index) const;
  ::milvus::proto::milvus::PlaceholderValue* add_placeholders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PlaceholderValue >&
      placeholders() const;

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.PlaceholderGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PlaceholderValue > placeholders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kOutputFieldsFieldNumber = 8,
    kSearchParamsFieldNumber = 9,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kDslFieldNumber = 5,
    kPlaceholderGroupFieldNumber = 6,
    kBaseFieldNumber = 1,
    kTravelTimestampFieldNumber = 10,
    kGuaranteeTimestampFieldNumber = 11,
    kDslTypeFieldNumber = 7,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // repeated string output_fields = 8;
  int output_fields_size() const;
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();

  // repeated .milvus.proto.common.KeyValuePair search_params = 9;
  int search_params_size() const;
  void clear_search_params();
  ::milvus::proto::common::KeyValuePair* mutable_search_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_search_params();
  const ::milvus::proto::common::KeyValuePair& search_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_search_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      search_params() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string dsl = 5;
  void clear_dsl();
  const std::string& dsl() const;
  void set_dsl(const std::string& value);
  void set_dsl(std::string&& value);
  void set_dsl(const char* value);
  void set_dsl(const char* value, size_t size);
  std::string* mutable_dsl();
  std::string* release_dsl();
  void set_allocated_dsl(std::string* dsl);

  // bytes placeholder_group = 6;
  void clear_placeholder_group();
  const std::string& placeholder_group() const;
  void set_placeholder_group(const std::string& value);
  void set_placeholder_group(std::string&& value);
  void set_placeholder_group(const char* value);
  void set_placeholder_group(const void* value, size_t size);
  std::string* mutable_placeholder_group();
  std::string* release_placeholder_group();
  void set_allocated_placeholder_group(std::string* placeholder_group);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // uint64 travel_timestamp = 10;
  void clear_travel_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 travel_timestamp() const;
  void set_travel_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 guarantee_timestamp = 11;
  void clear_guarantee_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 guarantee_timestamp() const;
  void set_guarantee_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .milvus.proto.common.DslType dsl_type = 7;
  void clear_dsl_type();
  ::milvus::proto::common::DslType dsl_type() const;
  void set_dsl_type(::milvus::proto::common::DslType value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > search_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dsl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_group_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 travel_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guarantee_timestamp_;
  int dsl_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class Hits :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.Hits) */ {
 public:
  Hits();
  virtual ~Hits();

  Hits(const Hits& from);
  Hits(Hits&& from) noexcept
    : Hits() {
    *this = ::std::move(from);
  }

  inline Hits& operator=(const Hits& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hits& operator=(Hits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hits* internal_default_instance() {
    return reinterpret_cast<const Hits*>(
               &_Hits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Hits& a, Hits& b) {
    a.Swap(&b);
  }
  inline void Swap(Hits* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hits* New() const final {
    return CreateMaybeMessage<Hits>(nullptr);
  }

  Hits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hits& from);
  void MergeFrom(const Hits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.Hits";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDsFieldNumber = 1,
    kRowDataFieldNumber = 2,
    kScoresFieldNumber = 3,
  };
  // repeated int64 IDs = 1;
  int ids_size() const;
  void clear_ids();
  ::PROTOBUF_NAMESPACE_ID::int64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_ids();

  // repeated bytes row_data = 2;
  int row_data_size() const;
  void clear_row_data();
  const std::string& row_data(int index) const;
  std::string* mutable_row_data(int index);
  void set_row_data(int index, const std::string& value);
  void set_row_data(int index, std::string&& value);
  void set_row_data(int index, const char* value);
  void set_row_data(int index, const void* value, size_t size);
  std::string* add_row_data();
  void add_row_data(const std::string& value);
  void add_row_data(std::string&& value);
  void add_row_data(const char* value);
  void add_row_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_data();

  // repeated float scores = 3;
  int scores_size() const;
  void clear_scores();
  float scores(int index) const;
  void set_scores(int index, float value);
  void add_scores(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scores();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.Hits)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scores_;
  mutable std::atomic<int> _scores_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SearchResults :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SearchResults) */ {
 public:
  SearchResults();
  virtual ~SearchResults();

  SearchResults(const SearchResults& from);
  SearchResults(SearchResults&& from) noexcept
    : SearchResults() {
    *this = ::std::move(from);
  }

  inline SearchResults& operator=(const SearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResults& operator=(SearchResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResults* internal_default_instance() {
    return reinterpret_cast<const SearchResults*>(
               &_SearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SearchResults& a, SearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResults* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResults* New() const final {
    return CreateMaybeMessage<SearchResults>(nullptr);
  }

  SearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResults& from);
  void MergeFrom(const SearchResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SearchResults";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 3,
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // .milvus.proto.schema.SearchResultData results = 2;
  bool has_results() const;
  void clear_results();
  const ::milvus::proto::schema::SearchResultData& results() const;
  ::milvus::proto::schema::SearchResultData* release_results();
  ::milvus::proto::schema::SearchResultData* mutable_results();
  void set_allocated_results(::milvus::proto::schema::SearchResultData* results);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SearchResults)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::Status* status_;
  ::milvus::proto::schema::SearchResultData* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.FlushRequest) */ {
 public:
  FlushRequest();
  virtual ~FlushRequest();

  FlushRequest(const FlushRequest& from);
  FlushRequest(FlushRequest&& from) noexcept
    : FlushRequest() {
    *this = ::std::move(from);
  }

  inline FlushRequest& operator=(const FlushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRequest& operator=(FlushRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushRequest* internal_default_instance() {
    return reinterpret_cast<const FlushRequest*>(
               &_FlushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(FlushRequest& a, FlushRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushRequest* New() const final {
    return CreateMaybeMessage<FlushRequest>(nullptr);
  }

  FlushRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushRequest& from);
  void MergeFrom(const FlushRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.FlushRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNamesFieldNumber = 3,
    kDbNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated string collection_names = 3;
  int collection_names_size() const;
  void clear_collection_names();
  const std::string& collection_names(int index) const;
  std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const std::string& value);
  void set_collection_names(int index, std::string&& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  std::string* add_collection_names();
  void add_collection_names(const std::string& value);
  void add_collection_names(std::string&& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_names();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.FlushRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushResponse_CollSegIDsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_CollSegIDsEntry_DoNotUse, 
    std::string, ::milvus::proto::schema::LongArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_CollSegIDsEntry_DoNotUse, 
    std::string, ::milvus::proto::schema::LongArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FlushResponse_CollSegIDsEntry_DoNotUse();
  FlushResponse_CollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlushResponse_CollSegIDsEntry_DoNotUse& other);
  static const FlushResponse_CollSegIDsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlushResponse_CollSegIDsEntry_DoNotUse*>(&_FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.FlushResponse.CollSegIDsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[47];
  }

  public:
};

// -------------------------------------------------------------------

class FlushResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.FlushResponse) */ {
 public:
  FlushResponse();
  virtual ~FlushResponse();

  FlushResponse(const FlushResponse& from);
  FlushResponse(FlushResponse&& from) noexcept
    : FlushResponse() {
    *this = ::std::move(from);
  }

  inline FlushResponse& operator=(const FlushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushResponse& operator=(FlushResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushResponse* internal_default_instance() {
    return reinterpret_cast<const FlushResponse*>(
               &_FlushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(FlushResponse& a, FlushResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushResponse* New() const final {
    return CreateMaybeMessage<FlushResponse>(nullptr);
  }

  FlushResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushResponse& from);
  void MergeFrom(const FlushResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.FlushResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCollSegIDsFieldNumber = 3,
    kDbNameFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
  int coll_segids_size() const;
  void clear_coll_segids();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
      coll_segids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
      mutable_coll_segids();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.FlushResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlushResponse_CollSegIDsEntry_DoNotUse,
      std::string, ::milvus::proto::schema::LongArray,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > coll_segids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.QueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldsFieldNumber = 5,
    kPartitionNamesFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kExprFieldNumber = 4,
    kBaseFieldNumber = 1,
    kTravelTimestampFieldNumber = 7,
    kGuaranteeTimestampFieldNumber = 8,
  };
  // repeated string output_fields = 5;
  int output_fields_size() const;
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();

  // repeated string partition_names = 6;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string expr = 4;
  void clear_expr();
  const std::string& expr() const;
  void set_expr(const std::string& value);
  void set_expr(std::string&& value);
  void set_expr(const char* value);
  void set_expr(const char* value, size_t size);
  std::string* mutable_expr();
  std::string* release_expr();
  void set_allocated_expr(std::string* expr);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // uint64 travel_timestamp = 7;
  void clear_travel_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 travel_timestamp() const;
  void set_travel_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 guarantee_timestamp = 8;
  void clear_guarantee_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 guarantee_timestamp() const;
  void set_guarantee_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.QueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 travel_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guarantee_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QueryResults :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.QueryResults) */ {
 public:
  QueryResults();
  virtual ~QueryResults();

  QueryResults(const QueryResults& from);
  QueryResults(QueryResults&& from) noexcept
    : QueryResults() {
    *this = ::std::move(from);
  }

  inline QueryResults& operator=(const QueryResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResults& operator=(QueryResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResults* internal_default_instance() {
    return reinterpret_cast<const QueryResults*>(
               &_QueryResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(QueryResults& a, QueryResults& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResults* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResults* New() const final {
    return CreateMaybeMessage<QueryResults>(nullptr);
  }

  QueryResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResults& from);
  void MergeFrom(const QueryResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.QueryResults";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 2;
  int fields_data_size() const;
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.QueryResults)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorIDs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.VectorIDs) */ {
 public:
  VectorIDs();
  virtual ~VectorIDs();

  VectorIDs(const VectorIDs& from);
  VectorIDs(VectorIDs&& from) noexcept
    : VectorIDs() {
    *this = ::std::move(from);
  }

  inline VectorIDs& operator=(const VectorIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorIDs& operator=(VectorIDs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorIDs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorIDs* internal_default_instance() {
    return reinterpret_cast<const VectorIDs*>(
               &_VectorIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(VectorIDs& a, VectorIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorIDs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorIDs* New() const final {
    return CreateMaybeMessage<VectorIDs>(nullptr);
  }

  VectorIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorIDs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorIDs& from);
  void MergeFrom(const VectorIDs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorIDs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.VectorIDs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kCollectionNameFieldNumber = 1,
    kFieldNameFieldNumber = 2,
    kIdArrayFieldNumber = 3,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();

  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string field_name = 2;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // .milvus.proto.schema.IDs id_array = 3;
  bool has_id_array() const;
  void clear_id_array();
  const ::milvus::proto::schema::IDs& id_array() const;
  ::milvus::proto::schema::IDs* release_id_array();
  ::milvus::proto::schema::IDs* mutable_id_array();
  void set_allocated_id_array(::milvus::proto::schema::IDs* id_array);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.VectorIDs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::milvus::proto::schema::IDs* id_array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorsArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.VectorsArray) */ {
 public:
  VectorsArray();
  virtual ~VectorsArray();

  VectorsArray(const VectorsArray& from);
  VectorsArray(VectorsArray&& from) noexcept
    : VectorsArray() {
    *this = ::std::move(from);
  }

  inline VectorsArray& operator=(const VectorsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorsArray& operator=(VectorsArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorsArray& default_instance();

  enum ArrayCase {
    kIdArray = 1,
    kDataArray = 2,
    ARRAY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorsArray* internal_default_instance() {
    return reinterpret_cast<const VectorsArray*>(
               &_VectorsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(VectorsArray& a, VectorsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorsArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorsArray* New() const final {
    return CreateMaybeMessage<VectorsArray>(nullptr);
  }

  VectorsArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorsArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorsArray& from);
  void MergeFrom(const VectorsArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorsArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.VectorsArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdArrayFieldNumber = 1,
    kDataArrayFieldNumber = 2,
  };
  // .milvus.proto.milvus.VectorIDs id_array = 1;
  bool has_id_array() const;
  void clear_id_array();
  const ::milvus::proto::milvus::VectorIDs& id_array() const;
  ::milvus::proto::milvus::VectorIDs* release_id_array();
  ::milvus::proto::milvus::VectorIDs* mutable_id_array();
  void set_allocated_id_array(::milvus::proto::milvus::VectorIDs* id_array);

  // .milvus.proto.schema.VectorField data_array = 2;
  bool has_data_array() const;
  void clear_data_array();
  const ::milvus::proto::schema::VectorField& data_array() const;
  ::milvus::proto::schema::VectorField* release_data_array();
  ::milvus::proto::schema::VectorField* mutable_data_array();
  void set_allocated_data_array(::milvus::proto::schema::VectorField* data_array);

  void clear_array();
  ArrayCase array_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.VectorsArray)
 private:
  class _Internal;
  void set_has_id_array();
  void set_has_data_array();

  inline bool has_array() const;
  inline void clear_has_array();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ArrayUnion {
    ArrayUnion() {}
    ::milvus::proto::milvus::VectorIDs* id_array_;
    ::milvus::proto::schema::VectorField* data_array_;
  } array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CalcDistanceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CalcDistanceRequest) */ {
 public:
  CalcDistanceRequest();
  virtual ~CalcDistanceRequest();

  CalcDistanceRequest(const CalcDistanceRequest& from);
  CalcDistanceRequest(CalcDistanceRequest&& from) noexcept
    : CalcDistanceRequest() {
    *this = ::std::move(from);
  }

  inline CalcDistanceRequest& operator=(const CalcDistanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcDistanceRequest& operator=(CalcDistanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalcDistanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalcDistanceRequest* internal_default_instance() {
    return reinterpret_cast<const CalcDistanceRequest*>(
               &_CalcDistanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CalcDistanceRequest& a, CalcDistanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcDistanceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalcDistanceRequest* New() const final {
    return CreateMaybeMessage<CalcDistanceRequest>(nullptr);
  }

  CalcDistanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalcDistanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalcDistanceRequest& from);
  void MergeFrom(const CalcDistanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcDistanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CalcDistanceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kBaseFieldNumber = 1,
    kOpLeftFieldNumber = 2,
    kOpRightFieldNumber = 3,
  };
  // repeated .milvus.proto.common.KeyValuePair params = 4;
  int params_size() const;
  void clear_params();
  ::milvus::proto::common::KeyValuePair* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_params();
  const ::milvus::proto::common::KeyValuePair& params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      params() const;

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // .milvus.proto.milvus.VectorsArray op_left = 2;
  bool has_op_left() const;
  void clear_op_left();
  const ::milvus::proto::milvus::VectorsArray& op_left() const;
  ::milvus::proto::milvus::VectorsArray* release_op_left();
  ::milvus::proto::milvus::VectorsArray* mutable_op_left();
  void set_allocated_op_left(::milvus::proto::milvus::VectorsArray* op_left);

  // .milvus.proto.milvus.VectorsArray op_right = 3;
  bool has_op_right() const;
  void clear_op_right();
  const ::milvus::proto::milvus::VectorsArray& op_right() const;
  ::milvus::proto::milvus::VectorsArray* release_op_right();
  ::milvus::proto::milvus::VectorsArray* mutable_op_right();
  void set_allocated_op_right(::milvus::proto::milvus::VectorsArray* op_right);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CalcDistanceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > params_;
  ::milvus::proto::common::MsgBase* base_;
  ::milvus::proto::milvus::VectorsArray* op_left_;
  ::milvus::proto::milvus::VectorsArray* op_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CalcDistanceResults :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CalcDistanceResults) */ {
 public:
  CalcDistanceResults();
  virtual ~CalcDistanceResults();

  CalcDistanceResults(const CalcDistanceResults& from);
  CalcDistanceResults(CalcDistanceResults&& from) noexcept
    : CalcDistanceResults() {
    *this = ::std::move(from);
  }

  inline CalcDistanceResults& operator=(const CalcDistanceResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcDistanceResults& operator=(CalcDistanceResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalcDistanceResults& default_instance();

  enum ArrayCase {
    kIntDist = 2,
    kFloatDist = 3,
    ARRAY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalcDistanceResults* internal_default_instance() {
    return reinterpret_cast<const CalcDistanceResults*>(
               &_CalcDistanceResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CalcDistanceResults& a, CalcDistanceResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcDistanceResults* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalcDistanceResults* New() const final {
    return CreateMaybeMessage<CalcDistanceResults>(nullptr);
  }

  CalcDistanceResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalcDistanceResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalcDistanceResults& from);
  void MergeFrom(const CalcDistanceResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcDistanceResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CalcDistanceResults";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIntDistFieldNumber = 2,
    kFloatDistFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // .milvus.proto.schema.IntArray int_dist = 2;
  bool has_int_dist() const;
  void clear_int_dist();
  const ::milvus::proto::schema::IntArray& int_dist() const;
  ::milvus::proto::schema::IntArray* release_int_dist();
  ::milvus::proto::schema::IntArray* mutable_int_dist();
  void set_allocated_int_dist(::milvus::proto::schema::IntArray* int_dist);

  // .milvus.proto.schema.FloatArray float_dist = 3;
  bool has_float_dist() const;
  void clear_float_dist();
  const ::milvus::proto::schema::FloatArray& float_dist() const;
  ::milvus::proto::schema::FloatArray* release_float_dist();
  ::milvus::proto::schema::FloatArray* mutable_float_dist();
  void set_allocated_float_dist(::milvus::proto::schema::FloatArray* float_dist);

  void clear_array();
  ArrayCase array_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CalcDistanceResults)
 private:
  class _Internal;
  void set_has_int_dist();
  void set_has_float_dist();

  inline bool has_array() const;
  inline void clear_has_array();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  union ArrayUnion {
    ArrayUnion() {}
    ::milvus::proto::schema::IntArray* int_dist_;
    ::milvus::proto::schema::FloatArray* float_dist_;
  } array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PersistentSegmentInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.PersistentSegmentInfo) */ {
 public:
  PersistentSegmentInfo();
  virtual ~PersistentSegmentInfo();

  PersistentSegmentInfo(const PersistentSegmentInfo& from);
  PersistentSegmentInfo(PersistentSegmentInfo&& from) noexcept
    : PersistentSegmentInfo() {
    *this = ::std::move(from);
  }

  inline PersistentSegmentInfo& operator=(const PersistentSegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentSegmentInfo& operator=(PersistentSegmentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistentSegmentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentSegmentInfo* internal_default_instance() {
    return reinterpret_cast<const PersistentSegmentInfo*>(
               &_PersistentSegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PersistentSegmentInfo& a, PersistentSegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentSegmentInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentSegmentInfo* New() const final {
    return CreateMaybeMessage<PersistentSegmentInfo>(nullptr);
  }

  PersistentSegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentSegmentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistentSegmentInfo& from);
  void MergeFrom(const PersistentSegmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentSegmentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.PersistentSegmentInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
    kNumRowsFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // int64 segmentID = 1;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 collectionID = 2;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 partitionID = 3;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 num_rows = 4;
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.common.SegmentState state = 5;
  void clear_state();
  ::milvus::proto::common::SegmentState state() const;
  void set_state(::milvus::proto::common::SegmentState value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.PersistentSegmentInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPersistentSegmentInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPersistentSegmentInfoRequest) */ {
 public:
  GetPersistentSegmentInfoRequest();
  virtual ~GetPersistentSegmentInfoRequest();

  GetPersistentSegmentInfoRequest(const GetPersistentSegmentInfoRequest& from);
  GetPersistentSegmentInfoRequest(GetPersistentSegmentInfoRequest&& from) noexcept
    : GetPersistentSegmentInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPersistentSegmentInfoRequest& operator=(const GetPersistentSegmentInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersistentSegmentInfoRequest& operator=(GetPersistentSegmentInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPersistentSegmentInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPersistentSegmentInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersistentSegmentInfoRequest*>(
               &_GetPersistentSegmentInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetPersistentSegmentInfoRequest& a, GetPersistentSegmentInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersistentSegmentInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPersistentSegmentInfoRequest* New() const final {
    return CreateMaybeMessage<GetPersistentSegmentInfoRequest>(nullptr);
  }

  GetPersistentSegmentInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPersistentSegmentInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPersistentSegmentInfoRequest& from);
  void MergeFrom(const GetPersistentSegmentInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersistentSegmentInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPersistentSegmentInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string dbName = 2;
  void clear_dbname();
  const std::string& dbname() const;
  void set_dbname(const std::string& value);
  void set_dbname(std::string&& value);
  void set_dbname(const char* value);
  void set_dbname(const char* value, size_t size);
  std::string* mutable_dbname();
  std::string* release_dbname();
  void set_allocated_dbname(std::string* dbname);

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  void set_collectionname(const std::string& value);
  void set_collectionname(std::string&& value);
  void set_collectionname(const char* value);
  void set_collectionname(const char* value, size_t size);
  std::string* mutable_collectionname();
  std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPersistentSegmentInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPersistentSegmentInfoResponse) */ {
 public:
  GetPersistentSegmentInfoResponse();
  virtual ~GetPersistentSegmentInfoResponse();

  GetPersistentSegmentInfoResponse(const GetPersistentSegmentInfoResponse& from);
  GetPersistentSegmentInfoResponse(GetPersistentSegmentInfoResponse&& from) noexcept
    : GetPersistentSegmentInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetPersistentSegmentInfoResponse& operator=(const GetPersistentSegmentInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersistentSegmentInfoResponse& operator=(GetPersistentSegmentInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPersistentSegmentInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPersistentSegmentInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersistentSegmentInfoResponse*>(
               &_GetPersistentSegmentInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetPersistentSegmentInfoResponse& a, GetPersistentSegmentInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersistentSegmentInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPersistentSegmentInfoResponse* New() const final {
    return CreateMaybeMessage<GetPersistentSegmentInfoResponse>(nullptr);
  }

  GetPersistentSegmentInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPersistentSegmentInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPersistentSegmentInfoResponse& from);
  void MergeFrom(const GetPersistentSegmentInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersistentSegmentInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPersistentSegmentInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  int infos_size() const;
  void clear_infos();
  ::milvus::proto::milvus::PersistentSegmentInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >*
      mutable_infos();
  const ::milvus::proto::milvus::PersistentSegmentInfo& infos(int index) const;
  ::milvus::proto::milvus::PersistentSegmentInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >&
      infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo > infos_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QuerySegmentInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.QuerySegmentInfo) */ {
 public:
  QuerySegmentInfo();
  virtual ~QuerySegmentInfo();

  QuerySegmentInfo(const QuerySegmentInfo& from);
  QuerySegmentInfo(QuerySegmentInfo&& from) noexcept
    : QuerySegmentInfo() {
    *this = ::std::move(from);
  }

  inline QuerySegmentInfo& operator=(const QuerySegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySegmentInfo& operator=(QuerySegmentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuerySegmentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuerySegmentInfo* internal_default_instance() {
    return reinterpret_cast<const QuerySegmentInfo*>(
               &_QuerySegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(QuerySegmentInfo& a, QuerySegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySegmentInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuerySegmentInfo* New() const final {
    return CreateMaybeMessage<QuerySegmentInfo>(nullptr);
  }

  QuerySegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuerySegmentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuerySegmentInfo& from);
  void MergeFrom(const QuerySegmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySegmentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.QuerySegmentInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 6,
    kSegmentIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
    kMemSizeFieldNumber = 4,
    kNumRowsFieldNumber = 5,
    kIndexIDFieldNumber = 7,
    kNodeIDFieldNumber = 8,
    kStateFieldNumber = 9,
  };
  // string index_name = 6;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // int64 segmentID = 1;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 collectionID = 2;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 partitionID = 3;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 mem_size = 4;
  void clear_mem_size();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size() const;
  void set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 num_rows = 5;
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 indexID = 7;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 nodeID = 8;
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::int64 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.common.SegmentState state = 9;
  void clear_state();
  ::milvus::proto::common::SegmentState state() const;
  void set_state(::milvus::proto::common::SegmentState value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.QuerySegmentInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  ::PROTOBUF_NAMESPACE_ID::int64 nodeid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetQuerySegmentInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetQuerySegmentInfoRequest) */ {
 public:
  GetQuerySegmentInfoRequest();
  virtual ~GetQuerySegmentInfoRequest();

  GetQuerySegmentInfoRequest(const GetQuerySegmentInfoRequest& from);
  GetQuerySegmentInfoRequest(GetQuerySegmentInfoRequest&& from) noexcept
    : GetQuerySegmentInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetQuerySegmentInfoRequest& operator=(const GetQuerySegmentInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuerySegmentInfoRequest& operator=(GetQuerySegmentInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetQuerySegmentInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetQuerySegmentInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetQuerySegmentInfoRequest*>(
               &_GetQuerySegmentInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetQuerySegmentInfoRequest& a, GetQuerySegmentInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuerySegmentInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetQuerySegmentInfoRequest* New() const final {
    return CreateMaybeMessage<GetQuerySegmentInfoRequest>(nullptr);
  }

  GetQuerySegmentInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetQuerySegmentInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetQuerySegmentInfoRequest& from);
  void MergeFrom(const GetQuerySegmentInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuerySegmentInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetQuerySegmentInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string dbName = 2;
  void clear_dbname();
  const std::string& dbname() const;
  void set_dbname(const std::string& value);
  void set_dbname(std::string&& value);
  void set_dbname(const char* value);
  void set_dbname(const char* value, size_t size);
  std::string* mutable_dbname();
  std::string* release_dbname();
  void set_allocated_dbname(std::string* dbname);

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  void set_collectionname(const std::string& value);
  void set_collectionname(std::string&& value);
  void set_collectionname(const char* value);
  void set_collectionname(const char* value, size_t size);
  std::string* mutable_collectionname();
  std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetQuerySegmentInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetQuerySegmentInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetQuerySegmentInfoResponse) */ {
 public:
  GetQuerySegmentInfoResponse();
  virtual ~GetQuerySegmentInfoResponse();

  GetQuerySegmentInfoResponse(const GetQuerySegmentInfoResponse& from);
  GetQuerySegmentInfoResponse(GetQuerySegmentInfoResponse&& from) noexcept
    : GetQuerySegmentInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetQuerySegmentInfoResponse& operator=(const GetQuerySegmentInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuerySegmentInfoResponse& operator=(GetQuerySegmentInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetQuerySegmentInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetQuerySegmentInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetQuerySegmentInfoResponse*>(
               &_GetQuerySegmentInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetQuerySegmentInfoResponse& a, GetQuerySegmentInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuerySegmentInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetQuerySegmentInfoResponse* New() const final {
    return CreateMaybeMessage<GetQuerySegmentInfoResponse>(nullptr);
  }

  GetQuerySegmentInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetQuerySegmentInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetQuerySegmentInfoResponse& from);
  void MergeFrom(const GetQuerySegmentInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuerySegmentInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetQuerySegmentInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  int infos_size() const;
  void clear_infos();
  ::milvus::proto::milvus::QuerySegmentInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >*
      mutable_infos();
  const ::milvus::proto::milvus::QuerySegmentInfo& infos(int index) const;
  ::milvus::proto::milvus::QuerySegmentInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >&
      infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetQuerySegmentInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo > infos_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DummyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DummyRequest) */ {
 public:
  DummyRequest();
  virtual ~DummyRequest();

  DummyRequest(const DummyRequest& from);
  DummyRequest(DummyRequest&& from) noexcept
    : DummyRequest() {
    *this = ::std::move(from);
  }

  inline DummyRequest& operator=(const DummyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyRequest& operator=(DummyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DummyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyRequest* internal_default_instance() {
    return reinterpret_cast<const DummyRequest*>(
               &_DummyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(DummyRequest& a, DummyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DummyRequest* New() const final {
    return CreateMaybeMessage<DummyRequest>(nullptr);
  }

  DummyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DummyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DummyRequest& from);
  void MergeFrom(const DummyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DummyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
  };
  // string request_type = 1;
  void clear_request_type();
  const std::string& request_type() const;
  void set_request_type(const std::string& value);
  void set_request_type(std::string&& value);
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  std::string* mutable_request_type();
  std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DummyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DummyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DummyResponse) */ {
 public:
  DummyResponse();
  virtual ~DummyResponse();

  DummyResponse(const DummyResponse& from);
  DummyResponse(DummyResponse&& from) noexcept
    : DummyResponse() {
    *this = ::std::move(from);
  }

  inline DummyResponse& operator=(const DummyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyResponse& operator=(DummyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DummyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyResponse* internal_default_instance() {
    return reinterpret_cast<const DummyResponse*>(
               &_DummyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(DummyResponse& a, DummyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DummyResponse* New() const final {
    return CreateMaybeMessage<DummyResponse>(nullptr);
  }

  DummyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DummyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DummyResponse& from);
  void MergeFrom(const DummyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DummyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DummyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RegisterLinkRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RegisterLinkRequest) */ {
 public:
  RegisterLinkRequest();
  virtual ~RegisterLinkRequest();

  RegisterLinkRequest(const RegisterLinkRequest& from);
  RegisterLinkRequest(RegisterLinkRequest&& from) noexcept
    : RegisterLinkRequest() {
    *this = ::std::move(from);
  }

  inline RegisterLinkRequest& operator=(const RegisterLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterLinkRequest& operator=(RegisterLinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterLinkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterLinkRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterLinkRequest*>(
               &_RegisterLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RegisterLinkRequest& a, RegisterLinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterLinkRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterLinkRequest* New() const final {
    return CreateMaybeMessage<RegisterLinkRequest>(nullptr);
  }

  RegisterLinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterLinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterLinkRequest& from);
  void MergeFrom(const RegisterLinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterLinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RegisterLinkRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RegisterLinkRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RegisterLinkResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RegisterLinkResponse) */ {
 public:
  RegisterLinkResponse();
  virtual ~RegisterLinkResponse();

  RegisterLinkResponse(const RegisterLinkResponse& from);
  RegisterLinkResponse(RegisterLinkResponse&& from) noexcept
    : RegisterLinkResponse() {
    *this = ::std::move(from);
  }

  inline RegisterLinkResponse& operator=(const RegisterLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterLinkResponse& operator=(RegisterLinkResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterLinkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterLinkResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterLinkResponse*>(
               &_RegisterLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(RegisterLinkResponse& a, RegisterLinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterLinkResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterLinkResponse* New() const final {
    return CreateMaybeMessage<RegisterLinkResponse>(nullptr);
  }

  RegisterLinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterLinkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterLinkResponse& from);
  void MergeFrom(const RegisterLinkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterLinkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RegisterLinkResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .milvus.proto.common.Address address = 1;
  bool has_address() const;
  void clear_address();
  const ::milvus::proto::common::Address& address() const;
  ::milvus::proto::common::Address* release_address();
  ::milvus::proto::common::Address* mutable_address();
  void set_allocated_address(::milvus::proto::common::Address* address);

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RegisterLinkResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Address* address_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetMetricsRequest) */ {
 public:
  GetMetricsRequest();
  virtual ~GetMetricsRequest();

  GetMetricsRequest(const GetMetricsRequest& from);
  GetMetricsRequest(GetMetricsRequest&& from) noexcept
    : GetMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetMetricsRequest& operator=(const GetMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsRequest& operator=(GetMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetricsRequest*>(
               &_GetMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetMetricsRequest& a, GetMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsRequest* New() const final {
    return CreateMaybeMessage<GetMetricsRequest>(nullptr);
  }

  GetMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMetricsRequest& from);
  void MergeFrom(const GetMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string request = 2;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetMetricsResponse) */ {
 public:
  GetMetricsResponse();
  virtual ~GetMetricsResponse();

  GetMetricsResponse(const GetMetricsResponse& from);
  GetMetricsResponse(GetMetricsResponse&& from) noexcept
    : GetMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetMetricsResponse& operator=(const GetMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsResponse& operator=(GetMetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetricsResponse*>(
               &_GetMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetMetricsResponse& a, GetMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsResponse* New() const final {
    return CreateMaybeMessage<GetMetricsResponse>(nullptr);
  }

  GetMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMetricsResponse& from);
  void MergeFrom(const GetMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetMetricsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kComponentNameFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string response = 2;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);

  // string component_name = 3;
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetMetricsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class LoadBalanceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.LoadBalanceRequest) */ {
 public:
  LoadBalanceRequest();
  virtual ~LoadBalanceRequest();

  LoadBalanceRequest(const LoadBalanceRequest& from);
  LoadBalanceRequest(LoadBalanceRequest&& from) noexcept
    : LoadBalanceRequest() {
    *this = ::std::move(from);
  }

  inline LoadBalanceRequest& operator=(const LoadBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadBalanceRequest& operator=(LoadBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const LoadBalanceRequest*>(
               &_LoadBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(LoadBalanceRequest& a, LoadBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadBalanceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadBalanceRequest* New() const final {
    return CreateMaybeMessage<LoadBalanceRequest>(nullptr);
  }

  LoadBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadBalanceRequest& from);
  void MergeFrom(const LoadBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.LoadBalanceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstNodeIDsFieldNumber = 3,
    kSealedSegmentIDsFieldNumber = 4,
    kBaseFieldNumber = 1,
    kSrcNodeIDFieldNumber = 2,
  };
  // repeated int64 dst_nodeIDs = 3;
  int dst_nodeids_size() const;
  void clear_dst_nodeids();
  ::PROTOBUF_NAMESPACE_ID::int64 dst_nodeids(int index) const;
  void set_dst_nodeids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dst_nodeids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dst_nodeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dst_nodeids();

  // repeated int64 sealed_segmentIDs = 4;
  int sealed_segmentids_size() const;
  void clear_sealed_segmentids();
  ::PROTOBUF_NAMESPACE_ID::int64 sealed_segmentids(int index) const;
  void set_sealed_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sealed_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sealed_segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sealed_segmentids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);

  // int64 src_nodeID = 2;
  void clear_src_nodeid();
  ::PROTOBUF_NAMESPACE_ID::int64 src_nodeid() const;
  void set_src_nodeid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.LoadBalanceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dst_nodeids_;
  mutable std::atomic<int> _dst_nodeids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sealed_segmentids_;
  mutable std::atomic<int> _sealed_segmentids_cached_byte_size_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 src_nodeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ManualCompactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ManualCompactionRequest) */ {
 public:
  ManualCompactionRequest();
  virtual ~ManualCompactionRequest();

  ManualCompactionRequest(const ManualCompactionRequest& from);
  ManualCompactionRequest(ManualCompactionRequest&& from) noexcept
    : ManualCompactionRequest() {
    *this = ::std::move(from);
  }

  inline ManualCompactionRequest& operator=(const ManualCompactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualCompactionRequest& operator=(ManualCompactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualCompactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualCompactionRequest* internal_default_instance() {
    return reinterpret_cast<const ManualCompactionRequest*>(
               &_ManualCompactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ManualCompactionRequest& a, ManualCompactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualCompactionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualCompactionRequest* New() const final {
    return CreateMaybeMessage<ManualCompactionRequest>(nullptr);
  }

  ManualCompactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualCompactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualCompactionRequest& from);
  void MergeFrom(const ManualCompactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualCompactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ManualCompactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionIDFieldNumber = 1,
    kTimetravelFieldNumber = 2,
  };
  // int64 collectionID = 1;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 timetravel = 2;
  void clear_timetravel();
  ::PROTOBUF_NAMESPACE_ID::uint64 timetravel() const;
  void set_timetravel(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ManualCompactionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timetravel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ManualCompactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ManualCompactionResponse) */ {
 public:
  ManualCompactionResponse();
  virtual ~ManualCompactionResponse();

  ManualCompactionResponse(const ManualCompactionResponse& from);
  ManualCompactionResponse(ManualCompactionResponse&& from) noexcept
    : ManualCompactionResponse() {
    *this = ::std::move(from);
  }

  inline ManualCompactionResponse& operator=(const ManualCompactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualCompactionResponse& operator=(ManualCompactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualCompactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualCompactionResponse* internal_default_instance() {
    return reinterpret_cast<const ManualCompactionResponse*>(
               &_ManualCompactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ManualCompactionResponse& a, ManualCompactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualCompactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualCompactionResponse* New() const final {
    return CreateMaybeMessage<ManualCompactionResponse>(nullptr);
  }

  ManualCompactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualCompactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualCompactionResponse& from);
  void MergeFrom(const ManualCompactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualCompactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ManualCompactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCompactionIDFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 compactionID = 2;
  void clear_compactionid();
  ::PROTOBUF_NAMESPACE_ID::int64 compactionid() const;
  void set_compactionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ManualCompactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 compactionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionStateRequest) */ {
 public:
  GetCompactionStateRequest();
  virtual ~GetCompactionStateRequest();

  GetCompactionStateRequest(const GetCompactionStateRequest& from);
  GetCompactionStateRequest(GetCompactionStateRequest&& from) noexcept
    : GetCompactionStateRequest() {
    *this = ::std::move(from);
  }

  inline GetCompactionStateRequest& operator=(const GetCompactionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionStateRequest& operator=(GetCompactionStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCompactionStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCompactionStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetCompactionStateRequest*>(
               &_GetCompactionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetCompactionStateRequest& a, GetCompactionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCompactionStateRequest* New() const final {
    return CreateMaybeMessage<GetCompactionStateRequest>(nullptr);
  }

  GetCompactionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCompactionStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCompactionStateRequest& from);
  void MergeFrom(const GetCompactionStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactionIDFieldNumber = 1,
  };
  // int64 compactionID = 1;
  void clear_compactionid();
  ::PROTOBUF_NAMESPACE_ID::int64 compactionid() const;
  void set_compactionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 compactionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionStateResponse) */ {
 public:
  GetCompactionStateResponse();
  virtual ~GetCompactionStateResponse();

  GetCompactionStateResponse(const GetCompactionStateResponse& from);
  GetCompactionStateResponse(GetCompactionStateResponse&& from) noexcept
    : GetCompactionStateResponse() {
    *this = ::std::move(from);
  }

  inline GetCompactionStateResponse& operator=(const GetCompactionStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionStateResponse& operator=(GetCompactionStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCompactionStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCompactionStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetCompactionStateResponse*>(
               &_GetCompactionStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetCompactionStateResponse& a, GetCompactionStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCompactionStateResponse* New() const final {
    return CreateMaybeMessage<GetCompactionStateResponse>(nullptr);
  }

  GetCompactionStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCompactionStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCompactionStateResponse& from);
  void MergeFrom(const GetCompactionStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kExecutingPlanNoFieldNumber = 3,
    kTimeoutPlanNoFieldNumber = 4,
    kCompletedPlanNoFieldNumber = 5,
    kStateFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 executingPlanNo = 3;
  void clear_executingplanno();
  ::PROTOBUF_NAMESPACE_ID::int64 executingplanno() const;
  void set_executingplanno(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 timeoutPlanNo = 4;
  void clear_timeoutplanno();
  ::PROTOBUF_NAMESPACE_ID::int64 timeoutplanno() const;
  void set_timeoutplanno(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 completedPlanNo = 5;
  void clear_completedplanno();
  ::PROTOBUF_NAMESPACE_ID::int64 completedplanno() const;
  void set_completedplanno(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.common.CompactionState state = 2;
  void clear_state();
  ::milvus::proto::common::CompactionState state() const;
  void set_state(::milvus::proto::common::CompactionState value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 executingplanno_;
  ::PROTOBUF_NAMESPACE_ID::int64 timeoutplanno_;
  ::PROTOBUF_NAMESPACE_ID::int64 completedplanno_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionPlansRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionPlansRequest) */ {
 public:
  GetCompactionPlansRequest();
  virtual ~GetCompactionPlansRequest();

  GetCompactionPlansRequest(const GetCompactionPlansRequest& from);
  GetCompactionPlansRequest(GetCompactionPlansRequest&& from) noexcept
    : GetCompactionPlansRequest() {
    *this = ::std::move(from);
  }

  inline GetCompactionPlansRequest& operator=(const GetCompactionPlansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionPlansRequest& operator=(GetCompactionPlansRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCompactionPlansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCompactionPlansRequest* internal_default_instance() {
    return reinterpret_cast<const GetCompactionPlansRequest*>(
               &_GetCompactionPlansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetCompactionPlansRequest& a, GetCompactionPlansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionPlansRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCompactionPlansRequest* New() const final {
    return CreateMaybeMessage<GetCompactionPlansRequest>(nullptr);
  }

  GetCompactionPlansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCompactionPlansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCompactionPlansRequest& from);
  void MergeFrom(const GetCompactionPlansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionPlansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionPlansRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactionIDFieldNumber = 1,
  };
  // int64 compactionID = 1;
  void clear_compactionid();
  ::PROTOBUF_NAMESPACE_ID::int64 compactionid() const;
  void set_compactionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionPlansRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 compactionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionPlansResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionPlansResponse) */ {
 public:
  GetCompactionPlansResponse();
  virtual ~GetCompactionPlansResponse();

  GetCompactionPlansResponse(const GetCompactionPlansResponse& from);
  GetCompactionPlansResponse(GetCompactionPlansResponse&& from) noexcept
    : GetCompactionPlansResponse() {
    *this = ::std::move(from);
  }

  inline GetCompactionPlansResponse& operator=(const GetCompactionPlansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionPlansResponse& operator=(GetCompactionPlansResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCompactionPlansResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCompactionPlansResponse* internal_default_instance() {
    return reinterpret_cast<const GetCompactionPlansResponse*>(
               &_GetCompactionPlansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetCompactionPlansResponse& a, GetCompactionPlansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionPlansResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCompactionPlansResponse* New() const final {
    return CreateMaybeMessage<GetCompactionPlansResponse>(nullptr);
  }

  GetCompactionPlansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCompactionPlansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCompactionPlansResponse& from);
  void MergeFrom(const GetCompactionPlansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionPlansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionPlansResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMergeInfosFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
  int mergeinfos_size() const;
  void clear_mergeinfos();
  ::milvus::proto::milvus::CompactionMergeInfo* mutable_mergeinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >*
      mutable_mergeinfos();
  const ::milvus::proto::milvus::CompactionMergeInfo& mergeinfos(int index) const;
  ::milvus::proto::milvus::CompactionMergeInfo* add_mergeinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >&
      mergeinfos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // .milvus.proto.common.CompactionState state = 2;
  void clear_state();
  ::milvus::proto::common::CompactionState state() const;
  void set_state(::milvus::proto::common::CompactionState value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionPlansResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo > mergeinfos_;
  ::milvus::proto::common::Status* status_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CompactionMergeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CompactionMergeInfo) */ {
 public:
  CompactionMergeInfo();
  virtual ~CompactionMergeInfo();

  CompactionMergeInfo(const CompactionMergeInfo& from);
  CompactionMergeInfo(CompactionMergeInfo&& from) noexcept
    : CompactionMergeInfo() {
    *this = ::std::move(from);
  }

  inline CompactionMergeInfo& operator=(const CompactionMergeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionMergeInfo& operator=(CompactionMergeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactionMergeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactionMergeInfo* internal_default_instance() {
    return reinterpret_cast<const CompactionMergeInfo*>(
               &_CompactionMergeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CompactionMergeInfo& a, CompactionMergeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionMergeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompactionMergeInfo* New() const final {
    return CreateMaybeMessage<CompactionMergeInfo>(nullptr);
  }

  CompactionMergeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactionMergeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactionMergeInfo& from);
  void MergeFrom(const CompactionMergeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionMergeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CompactionMergeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // repeated int64 sources = 1;
  int sources_size() const;
  void clear_sources();
  ::PROTOBUF_NAMESPACE_ID::int64 sources(int index) const;
  void set_sources(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sources(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sources() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sources();

  // int64 target = 2;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int64 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CompactionMergeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sources_;
  mutable std::atomic<int> _sources_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetFlushStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetFlushStateRequest) */ {
 public:
  GetFlushStateRequest();
  virtual ~GetFlushStateRequest();

  GetFlushStateRequest(const GetFlushStateRequest& from);
  GetFlushStateRequest(GetFlushStateRequest&& from) noexcept
    : GetFlushStateRequest() {
    *this = ::std::move(from);
  }

  inline GetFlushStateRequest& operator=(const GetFlushStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushStateRequest& operator=(GetFlushStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFlushStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFlushStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetFlushStateRequest*>(
               &_GetFlushStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetFlushStateRequest& a, GetFlushStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFlushStateRequest* New() const final {
    return CreateMaybeMessage<GetFlushStateRequest>(nullptr);
  }

  GetFlushStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFlushStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFlushStateRequest& from);
  void MergeFrom(const GetFlushStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetFlushStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 1;
  int segmentids_size() const;
  void clear_segmentids();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentids(int index) const;
  void set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_segmentids();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetFlushStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > segmentids_;
  mutable std::atomic<int> _segmentids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetFlushStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetFlushStateResponse) */ {
 public:
  GetFlushStateResponse();
  virtual ~GetFlushStateResponse();

  GetFlushStateResponse(const GetFlushStateResponse& from);
  GetFlushStateResponse(GetFlushStateResponse&& from) noexcept
    : GetFlushStateResponse() {
    *this = ::std::move(from);
  }

  inline GetFlushStateResponse& operator=(const GetFlushStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushStateResponse& operator=(GetFlushStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFlushStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFlushStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetFlushStateResponse*>(
               &_GetFlushStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetFlushStateResponse& a, GetFlushStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFlushStateResponse* New() const final {
    return CreateMaybeMessage<GetFlushStateResponse>(nullptr);
  }

  GetFlushStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFlushStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFlushStateResponse& from);
  void MergeFrom(const GetFlushStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetFlushStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFlushedFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // bool flushed = 2;
  void clear_flushed();
  bool flushed() const;
  void set_flushed(bool value);

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetFlushStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  bool flushed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateAliasRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& CreateAliasRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.base)
  return base_;
}
inline void CreateAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.base)
}

// string db_name = 2;
inline void CreateAliasRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.db_name)
  return db_name_.GetNoArena();
}
inline void CreateAliasRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateAliasRequest.db_name)
}
inline void CreateAliasRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateAliasRequest.db_name)
}
inline void CreateAliasRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateAliasRequest.db_name)
}
inline void CreateAliasRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateAliasRequest.db_name)
}
inline std::string* CreateAliasRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.db_name)
}

// string collection_name = 3;
inline void CreateAliasRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAliasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void CreateAliasRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateAliasRequest.collection_name)
}
inline void CreateAliasRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateAliasRequest.collection_name)
}
inline void CreateAliasRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateAliasRequest.collection_name)
}
inline void CreateAliasRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateAliasRequest.collection_name)
}
inline std::string* CreateAliasRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAliasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAliasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.collection_name)
}

// string alias = 4;
inline void CreateAliasRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.alias)
  return alias_.GetNoArena();
}
inline void CreateAliasRequest::set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateAliasRequest.alias)
}
inline void CreateAliasRequest::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateAliasRequest.alias)
}
inline void CreateAliasRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateAliasRequest.alias)
}
inline void CreateAliasRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateAliasRequest.alias)
}
inline std::string* CreateAliasRequest::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.alias)
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.alias)
}

// -------------------------------------------------------------------

// DropAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropAliasRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DropAliasRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropAliasRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropAliasRequest.base)
  return base_;
}
inline void DropAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropAliasRequest.base)
}

// string db_name = 2;
inline void DropAliasRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropAliasRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DropAliasRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropAliasRequest.db_name)
}
inline void DropAliasRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropAliasRequest.db_name)
}
inline void DropAliasRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropAliasRequest.db_name)
}
inline void DropAliasRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropAliasRequest.db_name)
}
inline std::string* DropAliasRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropAliasRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropAliasRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropAliasRequest.db_name)
}

// string alias = 3;
inline void DropAliasRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropAliasRequest.alias)
  return alias_.GetNoArena();
}
inline void DropAliasRequest::set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropAliasRequest.alias)
}
inline void DropAliasRequest::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropAliasRequest.alias)
}
inline void DropAliasRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropAliasRequest.alias)
}
inline void DropAliasRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropAliasRequest.alias)
}
inline std::string* DropAliasRequest::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropAliasRequest.alias)
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropAliasRequest.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropAliasRequest.alias)
}

// -------------------------------------------------------------------

// AlterAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool AlterAliasRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& AlterAliasRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.base)
  return base_;
}
inline void AlterAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.base)
}

// string db_name = 2;
inline void AlterAliasRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.db_name)
  return db_name_.GetNoArena();
}
inline void AlterAliasRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterAliasRequest.db_name)
}
inline void AlterAliasRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.AlterAliasRequest.db_name)
}
inline void AlterAliasRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.AlterAliasRequest.db_name)
}
inline void AlterAliasRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.AlterAliasRequest.db_name)
}
inline std::string* AlterAliasRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.db_name)
}

// string collection_name = 3;
inline void AlterAliasRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterAliasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void AlterAliasRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterAliasRequest.collection_name)
}
inline void AlterAliasRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.AlterAliasRequest.collection_name)
}
inline void AlterAliasRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.AlterAliasRequest.collection_name)
}
inline void AlterAliasRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.AlterAliasRequest.collection_name)
}
inline std::string* AlterAliasRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterAliasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterAliasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.collection_name)
}

// string alias = 4;
inline void AlterAliasRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.alias)
  return alias_.GetNoArena();
}
inline void AlterAliasRequest::set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterAliasRequest.alias)
}
inline void AlterAliasRequest::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.AlterAliasRequest.alias)
}
inline void AlterAliasRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.AlterAliasRequest.alias)
}
inline void AlterAliasRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.AlterAliasRequest.alias)
}
inline std::string* AlterAliasRequest::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.alias)
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.alias)
}

// -------------------------------------------------------------------

// CreateCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateCollectionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.base)
  return base_;
}
inline void CreateCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.base)
}

// string db_name = 2;
inline void CreateCollectionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void CreateCollectionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.db_name)
}
inline void CreateCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateCollectionRequest.db_name)
}
inline void CreateCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateCollectionRequest.db_name)
}
inline void CreateCollectionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateCollectionRequest.db_name)
}
inline std::string* CreateCollectionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.db_name)
}

// string collection_name = 3;
inline void CreateCollectionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void CreateCollectionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}
inline void CreateCollectionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}
inline void CreateCollectionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}
inline void CreateCollectionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}
inline std::string* CreateCollectionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}

// bytes schema = 4;
inline void CreateCollectionRequest::clear_schema() {
  schema_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.schema)
  return schema_.GetNoArena();
}
inline void CreateCollectionRequest::set_schema(const std::string& value) {
  
  schema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.schema)
}
inline void CreateCollectionRequest::set_schema(std::string&& value) {
  
  schema_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateCollectionRequest.schema)
}
inline void CreateCollectionRequest::set_schema(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateCollectionRequest.schema)
}
inline void CreateCollectionRequest::set_schema(const void* value, size_t size) {
  
  schema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateCollectionRequest.schema)
}
inline std::string* CreateCollectionRequest::mutable_schema() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.schema)
  return schema_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.schema)
  
  return schema_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.schema)
}

// int32 shards_num = 5;
inline void CreateCollectionRequest::clear_shards_num() {
  shards_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateCollectionRequest::shards_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.shards_num)
  return shards_num_;
}
inline void CreateCollectionRequest::set_shards_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shards_num_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.shards_num)
}

// .milvus.proto.common.ConsistencyLevel consistency_level = 6;
inline void CreateCollectionRequest::clear_consistency_level() {
  consistency_level_ = 0;
}
inline ::milvus::proto::common::ConsistencyLevel CreateCollectionRequest::consistency_level() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.consistency_level)
  return static_cast< ::milvus::proto::common::ConsistencyLevel >(consistency_level_);
}
inline void CreateCollectionRequest::set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  
  consistency_level_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.consistency_level)
}

// -------------------------------------------------------------------

// DropCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropCollectionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropCollectionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropCollectionRequest.base)
  return base_;
}
inline void DropCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropCollectionRequest.base)
}

// string db_name = 2;
inline void DropCollectionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropCollectionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DropCollectionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropCollectionRequest.db_name)
}
inline void DropCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropCollectionRequest.db_name)
}
inline void DropCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropCollectionRequest.db_name)
}
inline void DropCollectionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropCollectionRequest.db_name)
}
inline std::string* DropCollectionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropCollectionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropCollectionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropCollectionRequest.db_name)
}

// string collection_name = 3;
inline void DropCollectionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropCollectionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void DropCollectionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropCollectionRequest.collection_name)
}
inline void DropCollectionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropCollectionRequest.collection_name)
}
inline void DropCollectionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropCollectionRequest.collection_name)
}
inline void DropCollectionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropCollectionRequest.collection_name)
}
inline std::string* DropCollectionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropCollectionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropCollectionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropCollectionRequest.collection_name)
}

// -------------------------------------------------------------------

// HasCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool HasCollectionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& HasCollectionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* HasCollectionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* HasCollectionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasCollectionRequest.base)
  return base_;
}
inline void HasCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasCollectionRequest.base)
}

// string db_name = 2;
inline void HasCollectionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HasCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void HasCollectionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasCollectionRequest.db_name)
}
inline void HasCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.HasCollectionRequest.db_name)
}
inline void HasCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.HasCollectionRequest.db_name)
}
inline void HasCollectionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.HasCollectionRequest.db_name)
}
inline std::string* HasCollectionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasCollectionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HasCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasCollectionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HasCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasCollectionRequest.db_name)
}

// string collection_name = 3;
inline void HasCollectionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HasCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void HasCollectionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasCollectionRequest.collection_name)
}
inline void HasCollectionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.HasCollectionRequest.collection_name)
}
inline void HasCollectionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.HasCollectionRequest.collection_name)
}
inline void HasCollectionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.HasCollectionRequest.collection_name)
}
inline std::string* HasCollectionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasCollectionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HasCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasCollectionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HasCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasCollectionRequest.collection_name)
}

// uint64 time_stamp = 4;
inline void HasCollectionRequest::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HasCollectionRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.time_stamp)
  return time_stamp_;
}
inline void HasCollectionRequest::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasCollectionRequest.time_stamp)
}

// -------------------------------------------------------------------

// BoolResponse

// .milvus.proto.common.Status status = 1;
inline bool BoolResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& BoolResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.BoolResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* BoolResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.BoolResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* BoolResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.BoolResponse.status)
  return status_;
}
inline void BoolResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.BoolResponse.status)
}

// bool value = 2;
inline void BoolResponse::clear_value() {
  value_ = false;
}
inline bool BoolResponse::value() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.BoolResponse.value)
  return value_;
}
inline void BoolResponse::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.BoolResponse.value)
}

// -------------------------------------------------------------------

// StringResponse

// .milvus.proto.common.Status status = 1;
inline bool StringResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& StringResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.StringResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* StringResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.StringResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* StringResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.StringResponse.status)
  return status_;
}
inline void StringResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.StringResponse.status)
}

// string value = 2;
inline void StringResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StringResponse::value() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.StringResponse.value)
  return value_.GetNoArena();
}
inline void StringResponse::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.StringResponse.value)
}
inline void StringResponse::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.StringResponse.value)
}
inline void StringResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.StringResponse.value)
}
inline void StringResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.StringResponse.value)
}
inline std::string* StringResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.StringResponse.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringResponse::release_value() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.StringResponse.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.StringResponse.value)
}

// -------------------------------------------------------------------

// DescribeCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeCollectionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DescribeCollectionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DescribeCollectionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeCollectionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionRequest.base)
  return base_;
}
inline void DescribeCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.base)
}

// string db_name = 2;
inline void DescribeCollectionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DescribeCollectionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}
inline void DescribeCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}
inline void DescribeCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}
inline void DescribeCollectionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}
inline std::string* DescribeCollectionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}

// string collection_name = 3;
inline void DescribeCollectionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void DescribeCollectionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}
inline void DescribeCollectionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}
inline void DescribeCollectionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}
inline void DescribeCollectionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}
inline std::string* DescribeCollectionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}

// int64 collectionID = 4;
inline void DescribeCollectionRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.collectionID)
  return collectionid_;
}
inline void DescribeCollectionRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.collectionID)
}

// uint64 time_stamp = 5;
inline void DescribeCollectionRequest::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DescribeCollectionRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.time_stamp)
  return time_stamp_;
}
inline void DescribeCollectionRequest::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.time_stamp)
}

// -------------------------------------------------------------------

// DescribeCollectionResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeCollectionResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& DescribeCollectionResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* DescribeCollectionResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeCollectionResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.status)
  return status_;
}
inline void DescribeCollectionResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.status)
}

// .milvus.proto.schema.CollectionSchema schema = 2;
inline bool DescribeCollectionResponse::has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline const ::milvus::proto::schema::CollectionSchema& DescribeCollectionResponse::schema() const {
  const ::milvus::proto::schema::CollectionSchema* p = schema_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.schema)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::schema::CollectionSchema*>(
      &::milvus::proto::schema::_CollectionSchema_default_instance_);
}
inline ::milvus::proto::schema::CollectionSchema* DescribeCollectionResponse::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.schema)
  
  ::milvus::proto::schema::CollectionSchema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* DescribeCollectionResponse::mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::CollectionSchema>(GetArenaNoVirtual());
    schema_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.schema)
  return schema_;
}
inline void DescribeCollectionResponse::set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.schema)
}

// int64 collectionID = 3;
inline void DescribeCollectionResponse::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeCollectionResponse::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.collectionID)
  return collectionid_;
}
inline void DescribeCollectionResponse::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.collectionID)
}

// repeated string virtual_channel_names = 4;
inline int DescribeCollectionResponse::virtual_channel_names_size() const {
  return virtual_channel_names_.size();
}
inline void DescribeCollectionResponse::clear_virtual_channel_names() {
  virtual_channel_names_.Clear();
}
inline const std::string& DescribeCollectionResponse::virtual_channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return virtual_channel_names_.Get(index);
}
inline std::string* DescribeCollectionResponse::mutable_virtual_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return virtual_channel_names_.Mutable(index);
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  virtual_channel_names_.Mutable(index)->assign(value);
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  virtual_channel_names_.Mutable(index)->assign(std::move(value));
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  virtual_channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, const char* value, size_t size) {
  virtual_channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline std::string* DescribeCollectionResponse::add_virtual_channel_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return virtual_channel_names_.Add();
}
inline void DescribeCollectionResponse::add_virtual_channel_names(const std::string& value) {
  virtual_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::add_virtual_channel_names(std::string&& value) {
  virtual_channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::add_virtual_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  virtual_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::add_virtual_channel_names(const char* value, size_t size) {
  virtual_channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescribeCollectionResponse::virtual_channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return virtual_channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescribeCollectionResponse::mutable_virtual_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return &virtual_channel_names_;
}

// repeated string physical_channel_names = 5;
inline int DescribeCollectionResponse::physical_channel_names_size() const {
  return physical_channel_names_.size();
}
inline void DescribeCollectionResponse::clear_physical_channel_names() {
  physical_channel_names_.Clear();
}
inline const std::string& DescribeCollectionResponse::physical_channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return physical_channel_names_.Get(index);
}
inline std::string* DescribeCollectionResponse::mutable_physical_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return physical_channel_names_.Mutable(index);
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  physical_channel_names_.Mutable(index)->assign(value);
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  physical_channel_names_.Mutable(index)->assign(std::move(value));
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  physical_channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, const char* value, size_t size) {
  physical_channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline std::string* DescribeCollectionResponse::add_physical_channel_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return physical_channel_names_.Add();
}
inline void DescribeCollectionResponse::add_physical_channel_names(const std::string& value) {
  physical_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::add_physical_channel_names(std::string&& value) {
  physical_channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::add_physical_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  physical_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::add_physical_channel_names(const char* value, size_t size) {
  physical_channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescribeCollectionResponse::physical_channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return physical_channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescribeCollectionResponse::mutable_physical_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return &physical_channel_names_;
}

// uint64 created_timestamp = 6;
inline void DescribeCollectionResponse::clear_created_timestamp() {
  created_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DescribeCollectionResponse::created_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.created_timestamp)
  return created_timestamp_;
}
inline void DescribeCollectionResponse::set_created_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  created_timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.created_timestamp)
}

// uint64 created_utc_timestamp = 7;
inline void DescribeCollectionResponse::clear_created_utc_timestamp() {
  created_utc_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DescribeCollectionResponse::created_utc_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.created_utc_timestamp)
  return created_utc_timestamp_;
}
inline void DescribeCollectionResponse::set_created_utc_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  created_utc_timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.created_utc_timestamp)
}

// int32 shards_num = 8;
inline void DescribeCollectionResponse::clear_shards_num() {
  shards_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DescribeCollectionResponse::shards_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.shards_num)
  return shards_num_;
}
inline void DescribeCollectionResponse::set_shards_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shards_num_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.shards_num)
}

// repeated string aliases = 9;
inline int DescribeCollectionResponse::aliases_size() const {
  return aliases_.size();
}
inline void DescribeCollectionResponse::clear_aliases() {
  aliases_.Clear();
}
inline const std::string& DescribeCollectionResponse::aliases(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return aliases_.Get(index);
}
inline std::string* DescribeCollectionResponse::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return aliases_.Mutable(index);
}
inline void DescribeCollectionResponse::set_aliases(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  aliases_.Mutable(index)->assign(value);
}
inline void DescribeCollectionResponse::set_aliases(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  aliases_.Mutable(index)->assign(std::move(value));
}
inline void DescribeCollectionResponse::set_aliases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::set_aliases(int index, const char* value, size_t size) {
  aliases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline std::string* DescribeCollectionResponse::add_aliases() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return aliases_.Add();
}
inline void DescribeCollectionResponse::add_aliases(const std::string& value) {
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::add_aliases(std::string&& value) {
  aliases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::add_aliases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::add_aliases(const char* value, size_t size) {
  aliases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescribeCollectionResponse::aliases() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return aliases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescribeCollectionResponse::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return &aliases_;
}

// repeated .milvus.proto.common.KeyDataPair start_positions = 10;
inline int DescribeCollectionResponse::start_positions_size() const {
  return start_positions_.size();
}
inline ::milvus::proto::common::KeyDataPair* DescribeCollectionResponse::mutable_start_positions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return start_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
DescribeCollectionResponse::mutable_start_positions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return &start_positions_;
}
inline const ::milvus::proto::common::KeyDataPair& DescribeCollectionResponse::start_positions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return start_positions_.Get(index);
}
inline ::milvus::proto::common::KeyDataPair* DescribeCollectionResponse::add_start_positions() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return start_positions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
DescribeCollectionResponse::start_positions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return start_positions_;
}

// .milvus.proto.common.ConsistencyLevel consistency_level = 11;
inline void DescribeCollectionResponse::clear_consistency_level() {
  consistency_level_ = 0;
}
inline ::milvus::proto::common::ConsistencyLevel DescribeCollectionResponse::consistency_level() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.consistency_level)
  return static_cast< ::milvus::proto::common::ConsistencyLevel >(consistency_level_);
}
inline void DescribeCollectionResponse::set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  
  consistency_level_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.consistency_level)
}

// string collection_name = 12;
inline void DescribeCollectionResponse::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionResponse::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
  return collection_name_.GetNoArena();
}
inline void DescribeCollectionResponse::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}
inline void DescribeCollectionResponse::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}
inline void DescribeCollectionResponse::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}
inline void DescribeCollectionResponse::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}
inline std::string* DescribeCollectionResponse::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionResponse::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionResponse::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}

// -------------------------------------------------------------------

// LoadCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadCollectionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& LoadCollectionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* LoadCollectionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadCollectionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.base)
  return base_;
}
inline void LoadCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadCollectionRequest.base)
}

// string db_name = 2;
inline void LoadCollectionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void LoadCollectionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.db_name)
}
inline void LoadCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.LoadCollectionRequest.db_name)
}
inline void LoadCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadCollectionRequest.db_name)
}
inline void LoadCollectionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadCollectionRequest.db_name)
}
inline std::string* LoadCollectionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadCollectionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadCollectionRequest.db_name)
}

// string collection_name = 3;
inline void LoadCollectionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void LoadCollectionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}
inline void LoadCollectionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}
inline void LoadCollectionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}
inline void LoadCollectionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}
inline std::string* LoadCollectionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadCollectionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}

// -------------------------------------------------------------------

// ReleaseCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ReleaseCollectionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& ReleaseCollectionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleaseCollectionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* ReleaseCollectionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleaseCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReleaseCollectionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleaseCollectionRequest.base)
  return base_;
}
inline void ReleaseCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.base)
}

// string db_name = 2;
inline void ReleaseCollectionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void ReleaseCollectionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}
inline void ReleaseCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}
inline void ReleaseCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}
inline void ReleaseCollectionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}
inline std::string* ReleaseCollectionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}

// string collection_name = 3;
inline void ReleaseCollectionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void ReleaseCollectionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}
inline void ReleaseCollectionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}
inline void ReleaseCollectionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}
inline void ReleaseCollectionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}
inline std::string* ReleaseCollectionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}

// -------------------------------------------------------------------

// GetCollectionStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetCollectionStatisticsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetCollectionStatisticsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
  return base_;
}
inline void GetCollectionStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
}

// string db_name = 2;
inline void GetCollectionStatisticsRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollectionStatisticsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
  return db_name_.GetNoArena();
}
inline void GetCollectionStatisticsRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}
inline void GetCollectionStatisticsRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}
inline void GetCollectionStatisticsRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}
inline void GetCollectionStatisticsRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}
inline std::string* GetCollectionStatisticsRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollectionStatisticsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollectionStatisticsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}

// string collection_name = 3;
inline void GetCollectionStatisticsRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollectionStatisticsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void GetCollectionStatisticsRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}
inline void GetCollectionStatisticsRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}
inline void GetCollectionStatisticsRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}
inline void GetCollectionStatisticsRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}
inline std::string* GetCollectionStatisticsRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollectionStatisticsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollectionStatisticsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}

// -------------------------------------------------------------------

// GetCollectionStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetCollectionStatisticsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetCollectionStatisticsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
  return status_;
}
inline void GetCollectionStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair stats = 2;
inline int GetCollectionStatisticsResponse::stats_size() const {
  return stats_.size();
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetCollectionStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return &stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetCollectionStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return stats_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetCollectionStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return stats_;
}

// -------------------------------------------------------------------

// ShowCollectionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowCollectionsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& ShowCollectionsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* ShowCollectionsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowCollectionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowCollectionsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsRequest.base)
  return base_;
}
inline void ShowCollectionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowCollectionsRequest.base)
}

// string db_name = 2;
inline void ShowCollectionsRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShowCollectionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.db_name)
  return db_name_.GetNoArena();
}
inline void ShowCollectionsRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}
inline void ShowCollectionsRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}
inline void ShowCollectionsRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}
inline void ShowCollectionsRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}
inline std::string* ShowCollectionsRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShowCollectionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowCollectionsRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShowCollectionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}

// uint64 time_stamp = 3;
inline void ShowCollectionsRequest::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShowCollectionsRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.time_stamp)
  return time_stamp_;
}
inline void ShowCollectionsRequest::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.time_stamp)
}

// .milvus.proto.milvus.ShowType type = 4;
inline void ShowCollectionsRequest::clear_type() {
  type_ = 0;
}
inline ::milvus::proto::milvus::ShowType ShowCollectionsRequest::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.type)
  return static_cast< ::milvus::proto::milvus::ShowType >(type_);
}
inline void ShowCollectionsRequest::set_type(::milvus::proto::milvus::ShowType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.type)
}

// repeated string collection_names = 5;
inline int ShowCollectionsRequest::collection_names_size() const {
  return collection_names_.size();
}
inline void ShowCollectionsRequest::clear_collection_names() {
  collection_names_.Clear();
}
inline const std::string& ShowCollectionsRequest::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return collection_names_.Get(index);
}
inline std::string* ShowCollectionsRequest::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return collection_names_.Mutable(index);
}
inline void ShowCollectionsRequest::set_collection_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  collection_names_.Mutable(index)->assign(value);
}
inline void ShowCollectionsRequest::set_collection_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  collection_names_.Mutable(index)->assign(std::move(value));
}
inline void ShowCollectionsRequest::set_collection_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::set_collection_names(int index, const char* value, size_t size) {
  collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline std::string* ShowCollectionsRequest::add_collection_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return collection_names_.Add();
}
inline void ShowCollectionsRequest::add_collection_names(const std::string& value) {
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::add_collection_names(std::string&& value) {
  collection_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::add_collection_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::add_collection_names(const char* value, size_t size) {
  collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowCollectionsRequest::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return collection_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowCollectionsRequest::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return &collection_names_;
}

// -------------------------------------------------------------------

// ShowCollectionsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowCollectionsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& ShowCollectionsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* ShowCollectionsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowCollectionsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowCollectionsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsResponse.status)
  return status_;
}
inline void ShowCollectionsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowCollectionsResponse.status)
}

// repeated string collection_names = 2;
inline int ShowCollectionsResponse::collection_names_size() const {
  return collection_names_.size();
}
inline void ShowCollectionsResponse::clear_collection_names() {
  collection_names_.Clear();
}
inline const std::string& ShowCollectionsResponse::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return collection_names_.Get(index);
}
inline std::string* ShowCollectionsResponse::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return collection_names_.Mutable(index);
}
inline void ShowCollectionsResponse::set_collection_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  collection_names_.Mutable(index)->assign(value);
}
inline void ShowCollectionsResponse::set_collection_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  collection_names_.Mutable(index)->assign(std::move(value));
}
inline void ShowCollectionsResponse::set_collection_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::set_collection_names(int index, const char* value, size_t size) {
  collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline std::string* ShowCollectionsResponse::add_collection_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return collection_names_.Add();
}
inline void ShowCollectionsResponse::add_collection_names(const std::string& value) {
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::add_collection_names(std::string&& value) {
  collection_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::add_collection_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::add_collection_names(const char* value, size_t size) {
  collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowCollectionsResponse::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return collection_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowCollectionsResponse::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return &collection_names_;
}

// repeated int64 collection_ids = 3;
inline int ShowCollectionsResponse::collection_ids_size() const {
  return collection_ids_.size();
}
inline void ShowCollectionsResponse::clear_collection_ids() {
  collection_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowCollectionsResponse::collection_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
  return collection_ids_.Get(index);
}
inline void ShowCollectionsResponse::set_collection_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  collection_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
}
inline void ShowCollectionsResponse::add_collection_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  collection_ids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShowCollectionsResponse::collection_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
  return collection_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShowCollectionsResponse::mutable_collection_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
  return &collection_ids_;
}

// repeated uint64 created_timestamps = 4;
inline int ShowCollectionsResponse::created_timestamps_size() const {
  return created_timestamps_.size();
}
inline void ShowCollectionsResponse::clear_created_timestamps() {
  created_timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShowCollectionsResponse::created_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
  return created_timestamps_.Get(index);
}
inline void ShowCollectionsResponse::set_created_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
}
inline void ShowCollectionsResponse::add_created_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ShowCollectionsResponse::created_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
  return created_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ShowCollectionsResponse::mutable_created_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
  return &created_timestamps_;
}

// repeated uint64 created_utc_timestamps = 5;
inline int ShowCollectionsResponse::created_utc_timestamps_size() const {
  return created_utc_timestamps_.size();
}
inline void ShowCollectionsResponse::clear_created_utc_timestamps() {
  created_utc_timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShowCollectionsResponse::created_utc_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
  return created_utc_timestamps_.Get(index);
}
inline void ShowCollectionsResponse::set_created_utc_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_utc_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
}
inline void ShowCollectionsResponse::add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_utc_timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ShowCollectionsResponse::created_utc_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
  return created_utc_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ShowCollectionsResponse::mutable_created_utc_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
  return &created_utc_timestamps_;
}

// repeated int64 inMemory_percentages = 6;
inline int ShowCollectionsResponse::inmemory_percentages_size() const {
  return inmemory_percentages_.size();
}
inline void ShowCollectionsResponse::clear_inmemory_percentages() {
  inmemory_percentages_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowCollectionsResponse::inmemory_percentages(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
  return inmemory_percentages_.Get(index);
}
inline void ShowCollectionsResponse::set_inmemory_percentages(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  inmemory_percentages_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
}
inline void ShowCollectionsResponse::add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::int64 value) {
  inmemory_percentages_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShowCollectionsResponse::inmemory_percentages() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
  return inmemory_percentages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShowCollectionsResponse::mutable_inmemory_percentages() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
  return &inmemory_percentages_;
}

// -------------------------------------------------------------------

// CreatePartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreatePartitionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.base)
  return base_;
}
inline void CreatePartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.base)
}

// string db_name = 2;
inline void CreatePartitionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void CreatePartitionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreatePartitionRequest.db_name)
}
inline void CreatePartitionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreatePartitionRequest.db_name)
}
inline void CreatePartitionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreatePartitionRequest.db_name)
}
inline void CreatePartitionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreatePartitionRequest.db_name)
}
inline std::string* CreatePartitionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.db_name)
}

// string collection_name = 3;
inline void CreatePartitionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void CreatePartitionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}
inline void CreatePartitionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}
inline void CreatePartitionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}
inline void CreatePartitionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}
inline std::string* CreatePartitionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}

// string partition_name = 4;
inline void CreatePartitionRequest::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.partition_name)
  return partition_name_.GetNoArena();
}
inline void CreatePartitionRequest::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}
inline void CreatePartitionRequest::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}
inline void CreatePartitionRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}
inline void CreatePartitionRequest::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}
inline std::string* CreatePartitionRequest::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}

// -------------------------------------------------------------------

// DropPartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropPartitionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.base)
  return base_;
}
inline void DropPartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.base)
}

// string db_name = 2;
inline void DropPartitionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropPartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DropPartitionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropPartitionRequest.db_name)
}
inline void DropPartitionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropPartitionRequest.db_name)
}
inline void DropPartitionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropPartitionRequest.db_name)
}
inline void DropPartitionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropPartitionRequest.db_name)
}
inline std::string* DropPartitionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropPartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropPartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.db_name)
}

// string collection_name = 3;
inline void DropPartitionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropPartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void DropPartitionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropPartitionRequest.collection_name)
}
inline void DropPartitionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropPartitionRequest.collection_name)
}
inline void DropPartitionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropPartitionRequest.collection_name)
}
inline void DropPartitionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropPartitionRequest.collection_name)
}
inline std::string* DropPartitionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropPartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropPartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.collection_name)
}

// string partition_name = 4;
inline void DropPartitionRequest::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropPartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.partition_name)
  return partition_name_.GetNoArena();
}
inline void DropPartitionRequest::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropPartitionRequest.partition_name)
}
inline void DropPartitionRequest::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropPartitionRequest.partition_name)
}
inline void DropPartitionRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropPartitionRequest.partition_name)
}
inline void DropPartitionRequest::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropPartitionRequest.partition_name)
}
inline std::string* DropPartitionRequest::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropPartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropPartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.partition_name)
}

// -------------------------------------------------------------------

// HasPartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool HasPartitionRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& HasPartitionRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* HasPartitionRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* HasPartitionRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.base)
  return base_;
}
inline void HasPartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.base)
}

// string db_name = 2;
inline void HasPartitionRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HasPartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.db_name)
  return db_name_.GetNoArena();
}
inline void HasPartitionRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasPartitionRequest.db_name)
}
inline void HasPartitionRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.HasPartitionRequest.db_name)
}
inline void HasPartitionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.HasPartitionRequest.db_name)
}
inline void HasPartitionRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.HasPartitionRequest.db_name)
}
inline std::string* HasPartitionRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HasPartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HasPartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.db_name)
}

// string collection_name = 3;
inline void HasPartitionRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HasPartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void HasPartitionRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasPartitionRequest.collection_name)
}
inline void HasPartitionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.HasPartitionRequest.collection_name)
}
inline void HasPartitionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.HasPartitionRequest.collection_name)
}
inline void HasPartitionRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.HasPartitionRequest.collection_name)
}
inline std::string* HasPartitionRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HasPartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HasPartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.collection_name)
}

// string partition_name = 4;
inline void HasPartitionRequest::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HasPartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.partition_name)
  return partition_name_.GetNoArena();
}
inline void HasPartitionRequest::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasPartitionRequest.partition_name)
}
inline void HasPartitionRequest::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.HasPartitionRequest.partition_name)
}
inline void HasPartitionRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.HasPartitionRequest.partition_name)
}
inline void HasPartitionRequest::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.HasPartitionRequest.partition_name)
}
inline std::string* HasPartitionRequest::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HasPartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HasPartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.partition_name)
}

// -------------------------------------------------------------------

// LoadPartitionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadPartitionsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& LoadPartitionsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* LoadPartitionsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadPartitionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadPartitionsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.base)
  return base_;
}
inline void LoadPartitionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.base)
}

// string db_name = 2;
inline void LoadPartitionsRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadPartitionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.db_name)
  return db_name_.GetNoArena();
}
inline void LoadPartitionsRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}
inline void LoadPartitionsRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}
inline void LoadPartitionsRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}
inline void LoadPartitionsRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}
inline std::string* LoadPartitionsRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadPartitionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadPartitionsRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPartitionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}

// string collection_name = 3;
inline void LoadPartitionsRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadPartitionsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void LoadPartitionsRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}
inline void LoadPartitionsRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}
inline void LoadPartitionsRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}
inline void LoadPartitionsRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}
inline std::string* LoadPartitionsRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadPartitionsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPartitionsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}

// repeated string partition_names = 4;
inline int LoadPartitionsRequest::partition_names_size() const {
  return partition_names_.size();
}
inline void LoadPartitionsRequest::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& LoadPartitionsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return partition_names_.Get(index);
}
inline std::string* LoadPartitionsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return partition_names_.Mutable(index);
}
inline void LoadPartitionsRequest::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void LoadPartitionsRequest::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void LoadPartitionsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline std::string* LoadPartitionsRequest::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return partition_names_.Add();
}
inline void LoadPartitionsRequest::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoadPartitionsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoadPartitionsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return &partition_names_;
}

// -------------------------------------------------------------------

// ReleasePartitionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ReleasePartitionsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& ReleasePartitionsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* ReleasePartitionsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleasePartitionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReleasePartitionsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.base)
  return base_;
}
inline void ReleasePartitionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.base)
}

// string db_name = 2;
inline void ReleasePartitionsRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleasePartitionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
  return db_name_.GetNoArena();
}
inline void ReleasePartitionsRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}
inline void ReleasePartitionsRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}
inline void ReleasePartitionsRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}
inline void ReleasePartitionsRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}
inline std::string* ReleasePartitionsRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleasePartitionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleasePartitionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}

// string collection_name = 3;
inline void ReleasePartitionsRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleasePartitionsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void ReleasePartitionsRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}
inline void ReleasePartitionsRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}
inline void ReleasePartitionsRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}
inline void ReleasePartitionsRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}
inline std::string* ReleasePartitionsRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleasePartitionsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleasePartitionsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}

// repeated string partition_names = 4;
inline int ReleasePartitionsRequest::partition_names_size() const {
  return partition_names_.size();
}
inline void ReleasePartitionsRequest::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& ReleasePartitionsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return partition_names_.Get(index);
}
inline std::string* ReleasePartitionsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return partition_names_.Mutable(index);
}
inline void ReleasePartitionsRequest::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void ReleasePartitionsRequest::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void ReleasePartitionsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline std::string* ReleasePartitionsRequest::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return partition_names_.Add();
}
inline void ReleasePartitionsRequest::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReleasePartitionsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReleasePartitionsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return &partition_names_;
}

// -------------------------------------------------------------------

// GetPartitionStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetPartitionStatisticsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetPartitionStatisticsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
  return base_;
}
inline void GetPartitionStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
}

// string db_name = 2;
inline void GetPartitionStatisticsRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPartitionStatisticsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
  return db_name_.GetNoArena();
}
inline void GetPartitionStatisticsRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}
inline void GetPartitionStatisticsRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}
inline void GetPartitionStatisticsRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}
inline void GetPartitionStatisticsRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}
inline std::string* GetPartitionStatisticsRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPartitionStatisticsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPartitionStatisticsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}

// string collection_name = 3;
inline void GetPartitionStatisticsRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPartitionStatisticsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void GetPartitionStatisticsRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}
inline void GetPartitionStatisticsRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}
inline void GetPartitionStatisticsRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}
inline void GetPartitionStatisticsRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}
inline std::string* GetPartitionStatisticsRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPartitionStatisticsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPartitionStatisticsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}

// string partition_name = 4;
inline void GetPartitionStatisticsRequest::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPartitionStatisticsRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
  return partition_name_.GetNoArena();
}
inline void GetPartitionStatisticsRequest::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}
inline void GetPartitionStatisticsRequest::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}
inline void GetPartitionStatisticsRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}
inline void GetPartitionStatisticsRequest::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}
inline std::string* GetPartitionStatisticsRequest::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPartitionStatisticsRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPartitionStatisticsRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}

// -------------------------------------------------------------------

// GetPartitionStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetPartitionStatisticsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetPartitionStatisticsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
  return status_;
}
inline void GetPartitionStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair stats = 2;
inline int GetPartitionStatisticsResponse::stats_size() const {
  return stats_.size();
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetPartitionStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return &stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetPartitionStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return stats_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetPartitionStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return stats_;
}

// -------------------------------------------------------------------

// ShowPartitionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowPartitionsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& ShowPartitionsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* ShowPartitionsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowPartitionsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.base)
  return base_;
}
inline void ShowPartitionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.base)
}

// string db_name = 2;
inline void ShowPartitionsRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShowPartitionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.db_name)
  return db_name_.GetNoArena();
}
inline void ShowPartitionsRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}
inline void ShowPartitionsRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}
inline void ShowPartitionsRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}
inline void ShowPartitionsRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}
inline std::string* ShowPartitionsRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShowPartitionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShowPartitionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}

// string collection_name = 3;
inline void ShowPartitionsRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShowPartitionsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void ShowPartitionsRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}
inline void ShowPartitionsRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}
inline void ShowPartitionsRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}
inline void ShowPartitionsRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}
inline std::string* ShowPartitionsRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShowPartitionsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShowPartitionsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}

// int64 collectionID = 4;
inline void ShowPartitionsRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowPartitionsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.collectionID)
  return collectionid_;
}
inline void ShowPartitionsRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.collectionID)
}

// repeated string partition_names = 5;
inline int ShowPartitionsRequest::partition_names_size() const {
  return partition_names_.size();
}
inline void ShowPartitionsRequest::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& ShowPartitionsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return partition_names_.Get(index);
}
inline std::string* ShowPartitionsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return partition_names_.Mutable(index);
}
inline void ShowPartitionsRequest::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void ShowPartitionsRequest::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void ShowPartitionsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline std::string* ShowPartitionsRequest::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return partition_names_.Add();
}
inline void ShowPartitionsRequest::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowPartitionsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowPartitionsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return &partition_names_;
}

// .milvus.proto.milvus.ShowType type = 6;
inline void ShowPartitionsRequest::clear_type() {
  type_ = 0;
}
inline ::milvus::proto::milvus::ShowType ShowPartitionsRequest::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.type)
  return static_cast< ::milvus::proto::milvus::ShowType >(type_);
}
inline void ShowPartitionsRequest::set_type(::milvus::proto::milvus::ShowType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.type)
}

// -------------------------------------------------------------------

// ShowPartitionsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowPartitionsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& ShowPartitionsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* ShowPartitionsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowPartitionsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsResponse.status)
  return status_;
}
inline void ShowPartitionsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsResponse.status)
}

// repeated string partition_names = 2;
inline int ShowPartitionsResponse::partition_names_size() const {
  return partition_names_.size();
}
inline void ShowPartitionsResponse::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& ShowPartitionsResponse::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return partition_names_.Get(index);
}
inline std::string* ShowPartitionsResponse::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return partition_names_.Mutable(index);
}
inline void ShowPartitionsResponse::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void ShowPartitionsResponse::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void ShowPartitionsResponse::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline std::string* ShowPartitionsResponse::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return partition_names_.Add();
}
inline void ShowPartitionsResponse::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowPartitionsResponse::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowPartitionsResponse::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return &partition_names_;
}

// repeated int64 partitionIDs = 3;
inline int ShowPartitionsResponse::partitionids_size() const {
  return partitionids_.size();
}
inline void ShowPartitionsResponse::clear_partitionids() {
  partitionids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowPartitionsResponse::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
  return partitionids_.Get(index);
}
inline void ShowPartitionsResponse::set_partitionids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
}
inline void ShowPartitionsResponse::add_partitionids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  partitionids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShowPartitionsResponse::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
  return partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShowPartitionsResponse::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
  return &partitionids_;
}

// repeated uint64 created_timestamps = 4;
inline int ShowPartitionsResponse::created_timestamps_size() const {
  return created_timestamps_.size();
}
inline void ShowPartitionsResponse::clear_created_timestamps() {
  created_timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShowPartitionsResponse::created_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
  return created_timestamps_.Get(index);
}
inline void ShowPartitionsResponse::set_created_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
}
inline void ShowPartitionsResponse::add_created_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ShowPartitionsResponse::created_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
  return created_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ShowPartitionsResponse::mutable_created_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
  return &created_timestamps_;
}

// repeated uint64 created_utc_timestamps = 5;
inline int ShowPartitionsResponse::created_utc_timestamps_size() const {
  return created_utc_timestamps_.size();
}
inline void ShowPartitionsResponse::clear_created_utc_timestamps() {
  created_utc_timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShowPartitionsResponse::created_utc_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
  return created_utc_timestamps_.Get(index);
}
inline void ShowPartitionsResponse::set_created_utc_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_utc_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
}
inline void ShowPartitionsResponse::add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  created_utc_timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ShowPartitionsResponse::created_utc_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
  return created_utc_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ShowPartitionsResponse::mutable_created_utc_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
  return &created_utc_timestamps_;
}

// repeated int64 inMemory_percentages = 6;
inline int ShowPartitionsResponse::inmemory_percentages_size() const {
  return inmemory_percentages_.size();
}
inline void ShowPartitionsResponse::clear_inmemory_percentages() {
  inmemory_percentages_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowPartitionsResponse::inmemory_percentages(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
  return inmemory_percentages_.Get(index);
}
inline void ShowPartitionsResponse::set_inmemory_percentages(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  inmemory_percentages_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
}
inline void ShowPartitionsResponse::add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::int64 value) {
  inmemory_percentages_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShowPartitionsResponse::inmemory_percentages() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
  return inmemory_percentages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShowPartitionsResponse::mutable_inmemory_percentages() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
  return &inmemory_percentages_;
}

// -------------------------------------------------------------------

// DescribeSegmentRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeSegmentRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DescribeSegmentRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeSegmentRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeSegmentRequest.base)
  return base_;
}
inline void DescribeSegmentRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeSegmentRequest.base)
}

// int64 collectionID = 2;
inline void DescribeSegmentRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentRequest.collectionID)
  return collectionid_;
}
inline void DescribeSegmentRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentRequest.collectionID)
}

// int64 segmentID = 3;
inline void DescribeSegmentRequest::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentRequest.segmentID)
  return segmentid_;
}
inline void DescribeSegmentRequest::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentRequest.segmentID)
}

// -------------------------------------------------------------------

// DescribeSegmentResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeSegmentResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& DescribeSegmentResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* DescribeSegmentResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeSegmentResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeSegmentResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeSegmentResponse.status)
  return status_;
}
inline void DescribeSegmentResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeSegmentResponse.status)
}

// int64 indexID = 2;
inline void DescribeSegmentResponse::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentResponse::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.indexID)
  return indexid_;
}
inline void DescribeSegmentResponse::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.indexID)
}

// int64 buildID = 3;
inline void DescribeSegmentResponse::clear_buildid() {
  buildid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentResponse::buildid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.buildID)
  return buildid_;
}
inline void DescribeSegmentResponse::set_buildid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buildid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.buildID)
}

// bool enable_index = 4;
inline void DescribeSegmentResponse::clear_enable_index() {
  enable_index_ = false;
}
inline bool DescribeSegmentResponse::enable_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.enable_index)
  return enable_index_;
}
inline void DescribeSegmentResponse::set_enable_index(bool value) {
  
  enable_index_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.enable_index)
}

// int64 fieldID = 5;
inline void DescribeSegmentResponse::clear_fieldid() {
  fieldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentResponse::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.fieldID)
  return fieldid_;
}
inline void DescribeSegmentResponse::set_fieldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.fieldID)
}

// -------------------------------------------------------------------

// ShowSegmentsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowSegmentsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& ShowSegmentsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* ShowSegmentsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowSegmentsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowSegmentsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowSegmentsRequest.base)
  return base_;
}
inline void ShowSegmentsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowSegmentsRequest.base)
}

// int64 collectionID = 2;
inline void ShowSegmentsRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowSegmentsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsRequest.collectionID)
  return collectionid_;
}
inline void ShowSegmentsRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowSegmentsRequest.collectionID)
}

// int64 partitionID = 3;
inline void ShowSegmentsRequest::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowSegmentsRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsRequest.partitionID)
  return partitionid_;
}
inline void ShowSegmentsRequest::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowSegmentsRequest.partitionID)
}

// -------------------------------------------------------------------

// ShowSegmentsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowSegmentsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& ShowSegmentsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* ShowSegmentsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowSegmentsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowSegmentsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowSegmentsResponse.status)
  return status_;
}
inline void ShowSegmentsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowSegmentsResponse.status)
}

// repeated int64 segmentIDs = 2;
inline int ShowSegmentsResponse::segmentids_size() const {
  return segmentids_.size();
}
inline void ShowSegmentsResponse::clear_segmentids() {
  segmentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShowSegmentsResponse::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
  return segmentids_.Get(index);
}
inline void ShowSegmentsResponse::set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
}
inline void ShowSegmentsResponse::add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShowSegmentsResponse::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
  return segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShowSegmentsResponse::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
  return &segmentids_;
}

// -------------------------------------------------------------------

// CreateIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateIndexRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& CreateIndexRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.base)
  return base_;
}
inline void CreateIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.base)
}

// string db_name = 2;
inline void CreateIndexRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.db_name)
  return db_name_.GetNoArena();
}
inline void CreateIndexRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.db_name)
}
inline void CreateIndexRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateIndexRequest.db_name)
}
inline void CreateIndexRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateIndexRequest.db_name)
}
inline void CreateIndexRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateIndexRequest.db_name)
}
inline std::string* CreateIndexRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.db_name)
}

// string collection_name = 3;
inline void CreateIndexRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void CreateIndexRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.collection_name)
}
inline void CreateIndexRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateIndexRequest.collection_name)
}
inline void CreateIndexRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateIndexRequest.collection_name)
}
inline void CreateIndexRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateIndexRequest.collection_name)
}
inline std::string* CreateIndexRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.collection_name)
}

// string field_name = 4;
inline void CreateIndexRequest::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.field_name)
  return field_name_.GetNoArena();
}
inline void CreateIndexRequest::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.field_name)
}
inline void CreateIndexRequest::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.CreateIndexRequest.field_name)
}
inline void CreateIndexRequest::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CreateIndexRequest.field_name)
}
inline void CreateIndexRequest::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CreateIndexRequest.field_name)
}
inline std::string* CreateIndexRequest::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.field_name)
}

// repeated .milvus.proto.common.KeyValuePair extra_params = 5;
inline int CreateIndexRequest::extra_params_size() const {
  return extra_params_.size();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateIndexRequest::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return &extra_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return extra_params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::add_extra_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return extra_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateIndexRequest::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// DescribeIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeIndexRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DescribeIndexRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DescribeIndexRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeIndexRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.base)
  return base_;
}
inline void DescribeIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.base)
}

// string db_name = 2;
inline void DescribeIndexRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DescribeIndexRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.db_name)
}
inline void DescribeIndexRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeIndexRequest.db_name)
}
inline void DescribeIndexRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeIndexRequest.db_name)
}
inline void DescribeIndexRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeIndexRequest.db_name)
}
inline std::string* DescribeIndexRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.db_name)
}

// string collection_name = 3;
inline void DescribeIndexRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void DescribeIndexRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}
inline void DescribeIndexRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}
inline void DescribeIndexRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}
inline void DescribeIndexRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}
inline std::string* DescribeIndexRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}

// string field_name = 4;
inline void DescribeIndexRequest::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.field_name)
  return field_name_.GetNoArena();
}
inline void DescribeIndexRequest::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.field_name)
}
inline void DescribeIndexRequest::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeIndexRequest.field_name)
}
inline void DescribeIndexRequest::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeIndexRequest.field_name)
}
inline void DescribeIndexRequest::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeIndexRequest.field_name)
}
inline std::string* DescribeIndexRequest::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.field_name)
}

// string index_name = 5;
inline void DescribeIndexRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.index_name)
  return index_name_.GetNoArena();
}
inline void DescribeIndexRequest::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.index_name)
}
inline void DescribeIndexRequest::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DescribeIndexRequest.index_name)
}
inline void DescribeIndexRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeIndexRequest.index_name)
}
inline void DescribeIndexRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeIndexRequest.index_name)
}
inline std::string* DescribeIndexRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.index_name)
}

// -------------------------------------------------------------------

// IndexDescription

// string index_name = 1;
inline void IndexDescription::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexDescription::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.index_name)
  return index_name_.GetNoArena();
}
inline void IndexDescription::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.index_name)
}
inline void IndexDescription::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.IndexDescription.index_name)
}
inline void IndexDescription::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.IndexDescription.index_name)
}
inline void IndexDescription::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.IndexDescription.index_name)
}
inline std::string* IndexDescription::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexDescription::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.IndexDescription.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexDescription::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.IndexDescription.index_name)
}

// int64 indexID = 2;
inline void IndexDescription::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexDescription::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.indexID)
  return indexid_;
}
inline void IndexDescription::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.indexID)
}

// repeated .milvus.proto.common.KeyValuePair params = 3;
inline int IndexDescription::params_size() const {
  return params_.size();
}
inline ::milvus::proto::common::KeyValuePair* IndexDescription::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexDescription::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.IndexDescription.params)
  return &params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexDescription::params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.params)
  return params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexDescription::add_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.IndexDescription.params)
  return params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexDescription::params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.IndexDescription.params)
  return params_;
}

// string field_name = 4;
inline void IndexDescription::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexDescription::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.field_name)
  return field_name_.GetNoArena();
}
inline void IndexDescription::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.field_name)
}
inline void IndexDescription::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.IndexDescription.field_name)
}
inline void IndexDescription::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.IndexDescription.field_name)
}
inline void IndexDescription::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.IndexDescription.field_name)
}
inline std::string* IndexDescription::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexDescription::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.IndexDescription.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexDescription::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.IndexDescription.field_name)
}

// -------------------------------------------------------------------

// DescribeIndexResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeIndexResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& DescribeIndexResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexResponse.status)
  return status_;
}
inline void DescribeIndexResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexResponse.status)
}

// repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
inline int DescribeIndexResponse::index_descriptions_size() const {
  return index_descriptions_.size();
}
inline void DescribeIndexResponse::clear_index_descriptions() {
  index_descriptions_.Clear();
}
inline ::milvus::proto::milvus::IndexDescription* DescribeIndexResponse::mutable_index_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return index_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >*
DescribeIndexResponse::mutable_index_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return &index_descriptions_;
}
inline const ::milvus::proto::milvus::IndexDescription& DescribeIndexResponse::index_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return index_descriptions_.Get(index);
}
inline ::milvus::proto::milvus::IndexDescription* DescribeIndexResponse::add_index_descriptions() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return index_descriptions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >&
DescribeIndexResponse::index_descriptions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return index_descriptions_;
}

// -------------------------------------------------------------------

// GetIndexBuildProgressRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetIndexBuildProgressRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetIndexBuildProgressRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetIndexBuildProgressRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexBuildProgressRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
  return base_;
}
inline void GetIndexBuildProgressRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
}

// string db_name = 2;
inline void GetIndexBuildProgressRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexBuildProgressRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
  return db_name_.GetNoArena();
}
inline void GetIndexBuildProgressRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}
inline void GetIndexBuildProgressRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}
inline void GetIndexBuildProgressRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}
inline void GetIndexBuildProgressRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexBuildProgressRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexBuildProgressRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}

// string collection_name = 3;
inline void GetIndexBuildProgressRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexBuildProgressRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void GetIndexBuildProgressRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}
inline void GetIndexBuildProgressRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}
inline void GetIndexBuildProgressRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}
inline void GetIndexBuildProgressRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexBuildProgressRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexBuildProgressRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}

// string field_name = 4;
inline void GetIndexBuildProgressRequest::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexBuildProgressRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
  return field_name_.GetNoArena();
}
inline void GetIndexBuildProgressRequest::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}
inline void GetIndexBuildProgressRequest::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}
inline void GetIndexBuildProgressRequest::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}
inline void GetIndexBuildProgressRequest::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexBuildProgressRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexBuildProgressRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}

// string index_name = 5;
inline void GetIndexBuildProgressRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexBuildProgressRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
  return index_name_.GetNoArena();
}
inline void GetIndexBuildProgressRequest::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}
inline void GetIndexBuildProgressRequest::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}
inline void GetIndexBuildProgressRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}
inline void GetIndexBuildProgressRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexBuildProgressRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexBuildProgressRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexBuildProgressResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexBuildProgressResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetIndexBuildProgressResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
  return status_;
}
inline void GetIndexBuildProgressResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
}

// int64 indexed_rows = 2;
inline void GetIndexBuildProgressResponse::clear_indexed_rows() {
  indexed_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetIndexBuildProgressResponse::indexed_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressResponse.indexed_rows)
  return indexed_rows_;
}
inline void GetIndexBuildProgressResponse::set_indexed_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexed_rows_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressResponse.indexed_rows)
}

// int64 total_rows = 3;
inline void GetIndexBuildProgressResponse::clear_total_rows() {
  total_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetIndexBuildProgressResponse::total_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressResponse.total_rows)
  return total_rows_;
}
inline void GetIndexBuildProgressResponse::set_total_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_rows_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressResponse.total_rows)
}

// -------------------------------------------------------------------

// GetIndexStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetIndexStateRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetIndexStateRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetIndexStateRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexStateRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.base)
  return base_;
}
inline void GetIndexStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.base)
}

// string db_name = 2;
inline void GetIndexStateRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexStateRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.db_name)
  return db_name_.GetNoArena();
}
inline void GetIndexStateRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.db_name)
}
inline void GetIndexStateRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexStateRequest.db_name)
}
inline void GetIndexStateRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexStateRequest.db_name)
}
inline void GetIndexStateRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexStateRequest.db_name)
}
inline std::string* GetIndexStateRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexStateRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexStateRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.db_name)
}

// string collection_name = 3;
inline void GetIndexStateRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexStateRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void GetIndexStateRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}
inline void GetIndexStateRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}
inline void GetIndexStateRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}
inline void GetIndexStateRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}
inline std::string* GetIndexStateRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexStateRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexStateRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}

// string field_name = 4;
inline void GetIndexStateRequest::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexStateRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.field_name)
  return field_name_.GetNoArena();
}
inline void GetIndexStateRequest::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.field_name)
}
inline void GetIndexStateRequest::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexStateRequest.field_name)
}
inline void GetIndexStateRequest::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexStateRequest.field_name)
}
inline void GetIndexStateRequest::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexStateRequest.field_name)
}
inline std::string* GetIndexStateRequest::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexStateRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexStateRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.field_name)
}

// string index_name = 5;
inline void GetIndexStateRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexStateRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.index_name)
  return index_name_.GetNoArena();
}
inline void GetIndexStateRequest::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.index_name)
}
inline void GetIndexStateRequest::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexStateRequest.index_name)
}
inline void GetIndexStateRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexStateRequest.index_name)
}
inline void GetIndexStateRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexStateRequest.index_name)
}
inline std::string* GetIndexStateRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexStateRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexStateRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexStateResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetIndexStateResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateResponse.status)
  return status_;
}
inline void GetIndexStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateResponse.status)
}

// .milvus.proto.common.IndexState state = 2;
inline void GetIndexStateResponse::clear_state() {
  state_ = 0;
}
inline ::milvus::proto::common::IndexState GetIndexStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateResponse.state)
  return static_cast< ::milvus::proto::common::IndexState >(state_);
}
inline void GetIndexStateResponse::set_state(::milvus::proto::common::IndexState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateResponse.state)
}

// string fail_reason = 3;
inline void GetIndexStateResponse::clear_fail_reason() {
  fail_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIndexStateResponse::fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
  return fail_reason_.GetNoArena();
}
inline void GetIndexStateResponse::set_fail_reason(const std::string& value) {
  
  fail_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}
inline void GetIndexStateResponse::set_fail_reason(std::string&& value) {
  
  fail_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}
inline void GetIndexStateResponse::set_fail_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fail_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}
inline void GetIndexStateResponse::set_fail_reason(const char* value, size_t size) {
  
  fail_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}
inline std::string* GetIndexStateResponse::mutable_fail_reason() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
  return fail_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIndexStateResponse::release_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
  
  return fail_reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIndexStateResponse::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  fail_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fail_reason);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}

// -------------------------------------------------------------------

// DropIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropIndexRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DropIndexRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DropIndexRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropIndexRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.base)
  return base_;
}
inline void DropIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.base)
}

// string db_name = 2;
inline void DropIndexRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DropIndexRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.db_name)
}
inline void DropIndexRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropIndexRequest.db_name)
}
inline void DropIndexRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropIndexRequest.db_name)
}
inline void DropIndexRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropIndexRequest.db_name)
}
inline std::string* DropIndexRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.db_name)
}

// string collection_name = 3;
inline void DropIndexRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void DropIndexRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.collection_name)
}
inline void DropIndexRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropIndexRequest.collection_name)
}
inline void DropIndexRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropIndexRequest.collection_name)
}
inline void DropIndexRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropIndexRequest.collection_name)
}
inline std::string* DropIndexRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.collection_name)
}

// string field_name = 4;
inline void DropIndexRequest::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.field_name)
  return field_name_.GetNoArena();
}
inline void DropIndexRequest::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.field_name)
}
inline void DropIndexRequest::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropIndexRequest.field_name)
}
inline void DropIndexRequest::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropIndexRequest.field_name)
}
inline void DropIndexRequest::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropIndexRequest.field_name)
}
inline std::string* DropIndexRequest::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.field_name)
}

// string index_name = 5;
inline void DropIndexRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.index_name)
  return index_name_.GetNoArena();
}
inline void DropIndexRequest::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.index_name)
}
inline void DropIndexRequest::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DropIndexRequest.index_name)
}
inline void DropIndexRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DropIndexRequest.index_name)
}
inline void DropIndexRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DropIndexRequest.index_name)
}
inline std::string* DropIndexRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.index_name)
}

// -------------------------------------------------------------------

// InsertRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool InsertRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* InsertRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.base)
  return base_;
}
inline void InsertRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.base)
}

// string db_name = 2;
inline void InsertRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InsertRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.db_name)
  return db_name_.GetNoArena();
}
inline void InsertRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.db_name)
}
inline void InsertRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.InsertRequest.db_name)
}
inline void InsertRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.InsertRequest.db_name)
}
inline void InsertRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.InsertRequest.db_name)
}
inline std::string* InsertRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsertRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.db_name)
}

// string collection_name = 3;
inline void InsertRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InsertRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void InsertRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.collection_name)
}
inline void InsertRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.InsertRequest.collection_name)
}
inline void InsertRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.InsertRequest.collection_name)
}
inline void InsertRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.InsertRequest.collection_name)
}
inline std::string* InsertRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsertRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.collection_name)
}

// string partition_name = 4;
inline void InsertRequest::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InsertRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.partition_name)
  return partition_name_.GetNoArena();
}
inline void InsertRequest::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.partition_name)
}
inline void InsertRequest::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.InsertRequest.partition_name)
}
inline void InsertRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.InsertRequest.partition_name)
}
inline void InsertRequest::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.InsertRequest.partition_name)
}
inline std::string* InsertRequest::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsertRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.partition_name)
}

// repeated .milvus.proto.schema.FieldData fields_data = 5;
inline int InsertRequest::fields_data_size() const {
  return fields_data_.size();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.fields_data)
  return fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
InsertRequest::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.InsertRequest.fields_data)
  return &fields_data_;
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.fields_data)
  return fields_data_.Get(index);
}
inline ::milvus::proto::schema::FieldData* InsertRequest::add_fields_data() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.InsertRequest.fields_data)
  return fields_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
InsertRequest::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.InsertRequest.fields_data)
  return fields_data_;
}

// repeated uint32 hash_keys = 6;
inline int InsertRequest::hash_keys_size() const {
  return hash_keys_.size();
}
inline void InsertRequest::clear_hash_keys() {
  hash_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertRequest::hash_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.hash_keys)
  return hash_keys_.Get(index);
}
inline void InsertRequest::set_hash_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hash_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.hash_keys)
}
inline void InsertRequest::add_hash_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hash_keys_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.InsertRequest.hash_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InsertRequest::hash_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.InsertRequest.hash_keys)
  return hash_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InsertRequest::mutable_hash_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.InsertRequest.hash_keys)
  return &hash_keys_;
}

// uint32 num_rows = 7;
inline void InsertRequest::clear_num_rows() {
  num_rows_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.num_rows)
  return num_rows_;
}
inline void InsertRequest::set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.num_rows)
}

// -------------------------------------------------------------------

// MutationResult

// .milvus.proto.common.Status status = 1;
inline bool MutationResult::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& MutationResult::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* MutationResult::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.MutationResult.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* MutationResult::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.MutationResult.status)
  return status_;
}
inline void MutationResult::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.MutationResult.status)
}

// .milvus.proto.schema.IDs IDs = 2;
inline bool MutationResult::has_ids() const {
  return this != internal_default_instance() && ids_ != nullptr;
}
inline const ::milvus::proto::schema::IDs& MutationResult::ids() const {
  const ::milvus::proto::schema::IDs* p = ids_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.IDs)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::schema::IDs*>(
      &::milvus::proto::schema::_IDs_default_instance_);
}
inline ::milvus::proto::schema::IDs* MutationResult::release_ids() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.MutationResult.IDs)
  
  ::milvus::proto::schema::IDs* temp = ids_;
  ids_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* MutationResult::mutable_ids() {
  
  if (ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaNoVirtual());
    ids_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.MutationResult.IDs)
  return ids_;
}
inline void MutationResult::set_allocated_ids(::milvus::proto::schema::IDs* ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ids_);
  }
  if (ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ids, submessage_arena);
    }
    
  } else {
    
  }
  ids_ = ids;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.MutationResult.IDs)
}

// repeated uint32 succ_index = 3;
inline int MutationResult::succ_index_size() const {
  return succ_index_.size();
}
inline void MutationResult::clear_succ_index() {
  succ_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MutationResult::succ_index(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.succ_index)
  return succ_index_.Get(index);
}
inline void MutationResult::set_succ_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  succ_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.succ_index)
}
inline void MutationResult::add_succ_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  succ_index_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.MutationResult.succ_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MutationResult::succ_index() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.MutationResult.succ_index)
  return succ_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MutationResult::mutable_succ_index() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.MutationResult.succ_index)
  return &succ_index_;
}

// repeated uint32 err_index = 4;
inline int MutationResult::err_index_size() const {
  return err_index_.size();
}
inline void MutationResult::clear_err_index() {
  err_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MutationResult::err_index(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.err_index)
  return err_index_.Get(index);
}
inline void MutationResult::set_err_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  err_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.err_index)
}
inline void MutationResult::add_err_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  err_index_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.MutationResult.err_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MutationResult::err_index() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.MutationResult.err_index)
  return err_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MutationResult::mutable_err_index() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.MutationResult.err_index)
  return &err_index_;
}

// bool acknowledged = 5;
inline void MutationResult::clear_acknowledged() {
  acknowledged_ = false;
}
inline bool MutationResult::acknowledged() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.acknowledged)
  return acknowledged_;
}
inline void MutationResult::set_acknowledged(bool value) {
  
  acknowledged_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.acknowledged)
}

// int64 insert_cnt = 6;
inline void MutationResult::clear_insert_cnt() {
  insert_cnt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MutationResult::insert_cnt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.insert_cnt)
  return insert_cnt_;
}
inline void MutationResult::set_insert_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  insert_cnt_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.insert_cnt)
}

// int64 delete_cnt = 7;
inline void MutationResult::clear_delete_cnt() {
  delete_cnt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MutationResult::delete_cnt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.delete_cnt)
  return delete_cnt_;
}
inline void MutationResult::set_delete_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  delete_cnt_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.delete_cnt)
}

// int64 upsert_cnt = 8;
inline void MutationResult::clear_upsert_cnt() {
  upsert_cnt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MutationResult::upsert_cnt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.upsert_cnt)
  return upsert_cnt_;
}
inline void MutationResult::set_upsert_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upsert_cnt_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.upsert_cnt)
}

// uint64 timestamp = 9;
inline void MutationResult::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MutationResult::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.timestamp)
  return timestamp_;
}
inline void MutationResult::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.timestamp)
}

// -------------------------------------------------------------------

// DeleteRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DeleteRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.base)
  return base_;
}
inline void DeleteRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.base)
}

// string db_name = 2;
inline void DeleteRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DeleteRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.db_name)
}
inline void DeleteRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DeleteRequest.db_name)
}
inline void DeleteRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DeleteRequest.db_name)
}
inline void DeleteRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DeleteRequest.db_name)
}
inline std::string* DeleteRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.db_name)
}

// string collection_name = 3;
inline void DeleteRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void DeleteRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.collection_name)
}
inline void DeleteRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DeleteRequest.collection_name)
}
inline void DeleteRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DeleteRequest.collection_name)
}
inline void DeleteRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DeleteRequest.collection_name)
}
inline std::string* DeleteRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.collection_name)
}

// string partition_name = 4;
inline void DeleteRequest::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.partition_name)
  return partition_name_.GetNoArena();
}
inline void DeleteRequest::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.partition_name)
}
inline void DeleteRequest::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DeleteRequest.partition_name)
}
inline void DeleteRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DeleteRequest.partition_name)
}
inline void DeleteRequest::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DeleteRequest.partition_name)
}
inline std::string* DeleteRequest::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.partition_name)
}

// string expr = 5;
inline void DeleteRequest::clear_expr() {
  expr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::expr() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.expr)
  return expr_.GetNoArena();
}
inline void DeleteRequest::set_expr(const std::string& value) {
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.expr)
}
inline void DeleteRequest::set_expr(std::string&& value) {
  
  expr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DeleteRequest.expr)
}
inline void DeleteRequest::set_expr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DeleteRequest.expr)
}
inline void DeleteRequest::set_expr(const char* value, size_t size) {
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DeleteRequest.expr)
}
inline std::string* DeleteRequest::mutable_expr() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.expr)
  return expr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_expr() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.expr)
  
  return expr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_expr(std::string* expr) {
  if (expr != nullptr) {
    
  } else {
    
  }
  expr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expr);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.expr)
}

// repeated uint32 hash_keys = 6;
inline int DeleteRequest::hash_keys_size() const {
  return hash_keys_.size();
}
inline void DeleteRequest::clear_hash_keys() {
  hash_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRequest::hash_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.hash_keys)
  return hash_keys_.Get(index);
}
inline void DeleteRequest::set_hash_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hash_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.hash_keys)
}
inline void DeleteRequest::add_hash_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hash_keys_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DeleteRequest.hash_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DeleteRequest::hash_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DeleteRequest.hash_keys)
  return hash_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DeleteRequest::mutable_hash_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DeleteRequest.hash_keys)
  return &hash_keys_;
}

// -------------------------------------------------------------------

// PlaceholderValue

// string tag = 1;
inline void PlaceholderValue::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaceholderValue::tag() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PlaceholderValue.tag)
  return tag_.GetNoArena();
}
inline void PlaceholderValue::set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PlaceholderValue.tag)
}
inline void PlaceholderValue::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.PlaceholderValue.tag)
}
inline void PlaceholderValue::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.PlaceholderValue.tag)
}
inline void PlaceholderValue::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.PlaceholderValue.tag)
}
inline std::string* PlaceholderValue::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.PlaceholderValue.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaceholderValue::release_tag() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.PlaceholderValue.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceholderValue::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.PlaceholderValue.tag)
}

// .milvus.proto.milvus.PlaceholderType type = 2;
inline void PlaceholderValue::clear_type() {
  type_ = 0;
}
inline ::milvus::proto::milvus::PlaceholderType PlaceholderValue::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PlaceholderValue.type)
  return static_cast< ::milvus::proto::milvus::PlaceholderType >(type_);
}
inline void PlaceholderValue::set_type(::milvus::proto::milvus::PlaceholderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PlaceholderValue.type)
}

// repeated bytes values = 3;
inline int PlaceholderValue::values_size() const {
  return values_.size();
}
inline void PlaceholderValue::clear_values() {
  values_.Clear();
}
inline const std::string& PlaceholderValue::values(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PlaceholderValue.values)
  return values_.Get(index);
}
inline std::string* PlaceholderValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.PlaceholderValue.values)
  return values_.Mutable(index);
}
inline void PlaceholderValue::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PlaceholderValue.values)
  values_.Mutable(index)->assign(value);
}
inline void PlaceholderValue::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PlaceholderValue.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void PlaceholderValue::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.PlaceholderValue.values)
}
inline void PlaceholderValue::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.PlaceholderValue.values)
}
inline std::string* PlaceholderValue::add_values() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.PlaceholderValue.values)
  return values_.Add();
}
inline void PlaceholderValue::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.PlaceholderValue.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaceholderValue::values() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.PlaceholderValue.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlaceholderValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.PlaceholderValue.values)
  return &values_;
}

// -------------------------------------------------------------------

// PlaceholderGroup

// repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
inline int PlaceholderGroup::placeholders_size() const {
  return placeholders_.size();
}
inline void PlaceholderGroup::clear_placeholders() {
  placeholders_.Clear();
}
inline ::milvus::proto::milvus::PlaceholderValue* PlaceholderGroup::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.PlaceholderGroup.placeholders)
  return placeholders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PlaceholderValue >*
PlaceholderGroup::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.PlaceholderGroup.placeholders)
  return &placeholders_;
}
inline const ::milvus::proto::milvus::PlaceholderValue& PlaceholderGroup::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PlaceholderGroup.placeholders)
  return placeholders_.Get(index);
}
inline ::milvus::proto::milvus::PlaceholderValue* PlaceholderGroup::add_placeholders() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.PlaceholderGroup.placeholders)
  return placeholders_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PlaceholderValue >&
PlaceholderGroup::placeholders() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.PlaceholderGroup.placeholders)
  return placeholders_;
}

// -------------------------------------------------------------------

// SearchRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SearchRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& SearchRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* SearchRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.base)
  return base_;
}
inline void SearchRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.base)
}

// string db_name = 2;
inline void SearchRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.db_name)
  return db_name_.GetNoArena();
}
inline void SearchRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.db_name)
}
inline void SearchRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.SearchRequest.db_name)
}
inline void SearchRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.db_name)
}
inline void SearchRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.db_name)
}
inline std::string* SearchRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.db_name)
}

// string collection_name = 3;
inline void SearchRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void SearchRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.collection_name)
}
inline void SearchRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.SearchRequest.collection_name)
}
inline void SearchRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.collection_name)
}
inline void SearchRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.collection_name)
}
inline std::string* SearchRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.collection_name)
}

// repeated string partition_names = 4;
inline int SearchRequest::partition_names_size() const {
  return partition_names_.size();
}
inline void SearchRequest::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& SearchRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.partition_names)
  return partition_names_.Get(index);
}
inline std::string* SearchRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.partition_names)
  return partition_names_.Mutable(index);
}
inline void SearchRequest::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void SearchRequest::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void SearchRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.partition_names)
}
inline std::string* SearchRequest::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.SearchRequest.partition_names)
  return partition_names_.Add();
}
inline void SearchRequest::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.SearchRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SearchRequest.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SearchRequest.partition_names)
  return &partition_names_;
}

// string dsl = 5;
inline void SearchRequest::clear_dsl() {
  dsl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::dsl() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.dsl)
  return dsl_.GetNoArena();
}
inline void SearchRequest::set_dsl(const std::string& value) {
  
  dsl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.dsl)
}
inline void SearchRequest::set_dsl(std::string&& value) {
  
  dsl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.SearchRequest.dsl)
}
inline void SearchRequest::set_dsl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dsl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.dsl)
}
inline void SearchRequest::set_dsl(const char* value, size_t size) {
  
  dsl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.dsl)
}
inline std::string* SearchRequest::mutable_dsl() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.dsl)
  return dsl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_dsl() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.dsl)
  
  return dsl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_dsl(std::string* dsl) {
  if (dsl != nullptr) {
    
  } else {
    
  }
  dsl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dsl);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.dsl)
}

// bytes placeholder_group = 6;
inline void SearchRequest::clear_placeholder_group() {
  placeholder_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::placeholder_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.placeholder_group)
  return placeholder_group_.GetNoArena();
}
inline void SearchRequest::set_placeholder_group(const std::string& value) {
  
  placeholder_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.placeholder_group)
}
inline void SearchRequest::set_placeholder_group(std::string&& value) {
  
  placeholder_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.SearchRequest.placeholder_group)
}
inline void SearchRequest::set_placeholder_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placeholder_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.placeholder_group)
}
inline void SearchRequest::set_placeholder_group(const void* value, size_t size) {
  
  placeholder_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.placeholder_group)
}
inline std::string* SearchRequest::mutable_placeholder_group() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.placeholder_group)
  return placeholder_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_placeholder_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.placeholder_group)
  
  return placeholder_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_placeholder_group(std::string* placeholder_group) {
  if (placeholder_group != nullptr) {
    
  } else {
    
  }
  placeholder_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder_group);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.placeholder_group)
}

// .milvus.proto.common.DslType dsl_type = 7;
inline void SearchRequest::clear_dsl_type() {
  dsl_type_ = 0;
}
inline ::milvus::proto::common::DslType SearchRequest::dsl_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.dsl_type)
  return static_cast< ::milvus::proto::common::DslType >(dsl_type_);
}
inline void SearchRequest::set_dsl_type(::milvus::proto::common::DslType value) {
  
  dsl_type_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.dsl_type)
}

// repeated string output_fields = 8;
inline int SearchRequest::output_fields_size() const {
  return output_fields_.size();
}
inline void SearchRequest::clear_output_fields() {
  output_fields_.Clear();
}
inline const std::string& SearchRequest::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.output_fields)
  return output_fields_.Get(index);
}
inline std::string* SearchRequest::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.output_fields)
  return output_fields_.Mutable(index);
}
inline void SearchRequest::set_output_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.output_fields)
  output_fields_.Mutable(index)->assign(value);
}
inline void SearchRequest::set_output_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.output_fields)
  output_fields_.Mutable(index)->assign(std::move(value));
}
inline void SearchRequest::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::set_output_fields(int index, const char* value, size_t size) {
  output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.output_fields)
}
inline std::string* SearchRequest::add_output_fields() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.SearchRequest.output_fields)
  return output_fields_.Add();
}
inline void SearchRequest::add_output_fields(const std::string& value) {
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::add_output_fields(std::string&& value) {
  output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::add_output_fields(const char* value, size_t size) {
  output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.SearchRequest.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::output_fields() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SearchRequest.output_fields)
  return output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SearchRequest.output_fields)
  return &output_fields_;
}

// repeated .milvus.proto.common.KeyValuePair search_params = 9;
inline int SearchRequest::search_params_size() const {
  return search_params_.size();
}
inline ::milvus::proto::common::KeyValuePair* SearchRequest::mutable_search_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.search_params)
  return search_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
SearchRequest::mutable_search_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SearchRequest.search_params)
  return &search_params_;
}
inline const ::milvus::proto::common::KeyValuePair& SearchRequest::search_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.search_params)
  return search_params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* SearchRequest::add_search_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.search_params)
  return search_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
SearchRequest::search_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SearchRequest.search_params)
  return search_params_;
}

// uint64 travel_timestamp = 10;
inline void SearchRequest::clear_travel_timestamp() {
  travel_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.travel_timestamp)
  return travel_timestamp_;
}
inline void SearchRequest::set_travel_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  travel_timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 11;
inline void SearchRequest::clear_guarantee_timestamp() {
  guarantee_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.guarantee_timestamp)
  return guarantee_timestamp_;
}
inline void SearchRequest::set_guarantee_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guarantee_timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.guarantee_timestamp)
}

// -------------------------------------------------------------------

// Hits

// repeated int64 IDs = 1;
inline int Hits::ids_size() const {
  return ids_.size();
}
inline void Hits::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hits::ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.Hits.IDs)
  return ids_.Get(index);
}
inline void Hits::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.IDs)
}
inline void Hits::add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.IDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Hits::ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.Hits.IDs)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Hits::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.Hits.IDs)
  return &ids_;
}

// repeated bytes row_data = 2;
inline int Hits::row_data_size() const {
  return row_data_.size();
}
inline void Hits::clear_row_data() {
  row_data_.Clear();
}
inline const std::string& Hits::row_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.Hits.row_data)
  return row_data_.Get(index);
}
inline std::string* Hits::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.Hits.row_data)
  return row_data_.Mutable(index);
}
inline void Hits::set_row_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.row_data)
  row_data_.Mutable(index)->assign(value);
}
inline void Hits::set_row_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.row_data)
  row_data_.Mutable(index)->assign(std::move(value));
}
inline void Hits::set_row_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::set_row_data(int index, const void* value, size_t size) {
  row_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.Hits.row_data)
}
inline std::string* Hits::add_row_data() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.Hits.row_data)
  return row_data_.Add();
}
inline void Hits::add_row_data(const std::string& value) {
  row_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::add_row_data(std::string&& value) {
  row_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::add_row_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::add_row_data(const void* value, size_t size) {
  row_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.Hits.row_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Hits::row_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.Hits.row_data)
  return row_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Hits::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.Hits.row_data)
  return &row_data_;
}

// repeated float scores = 3;
inline int Hits::scores_size() const {
  return scores_.size();
}
inline void Hits::clear_scores() {
  scores_.Clear();
}
inline float Hits::scores(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.Hits.scores)
  return scores_.Get(index);
}
inline void Hits::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.scores)
}
inline void Hits::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Hits::scores() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.Hits.scores)
  return scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Hits::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.Hits.scores)
  return &scores_;
}

// -------------------------------------------------------------------

// SearchResults

// .milvus.proto.common.Status status = 1;
inline bool SearchResults::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& SearchResults::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchResults.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* SearchResults::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchResults.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SearchResults::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchResults.status)
  return status_;
}
inline void SearchResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchResults.status)
}

// .milvus.proto.schema.SearchResultData results = 2;
inline bool SearchResults::has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline const ::milvus::proto::schema::SearchResultData& SearchResults::results() const {
  const ::milvus::proto::schema::SearchResultData* p = results_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchResults.results)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::schema::SearchResultData*>(
      &::milvus::proto::schema::_SearchResultData_default_instance_);
}
inline ::milvus::proto::schema::SearchResultData* SearchResults::release_results() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchResults.results)
  
  ::milvus::proto::schema::SearchResultData* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::SearchResultData* SearchResults::mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::SearchResultData>(GetArenaNoVirtual());
    results_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchResults.results)
  return results_;
}
inline void SearchResults::set_allocated_results(::milvus::proto::schema::SearchResultData* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchResults.results)
}

// string collection_name = 3;
inline void SearchResults::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchResults::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchResults.collection_name)
  return collection_name_.GetNoArena();
}
inline void SearchResults::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchResults.collection_name)
}
inline void SearchResults::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.SearchResults.collection_name)
}
inline void SearchResults::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchResults.collection_name)
}
inline void SearchResults::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchResults.collection_name)
}
inline std::string* SearchResults::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchResults.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchResults::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchResults.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResults::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchResults.collection_name)
}

// -------------------------------------------------------------------

// FlushRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool FlushRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& FlushRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* FlushRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushRequest.base)
  return base_;
}
inline void FlushRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushRequest.base)
}

// string db_name = 2;
inline void FlushRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FlushRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushRequest.db_name)
  return db_name_.GetNoArena();
}
inline void FlushRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushRequest.db_name)
}
inline void FlushRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.FlushRequest.db_name)
}
inline void FlushRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.FlushRequest.db_name)
}
inline void FlushRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.FlushRequest.db_name)
}
inline std::string* FlushRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FlushRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FlushRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushRequest.db_name)
}

// repeated string collection_names = 3;
inline int FlushRequest::collection_names_size() const {
  return collection_names_.size();
}
inline void FlushRequest::clear_collection_names() {
  collection_names_.Clear();
}
inline const std::string& FlushRequest::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushRequest.collection_names)
  return collection_names_.Get(index);
}
inline std::string* FlushRequest::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushRequest.collection_names)
  return collection_names_.Mutable(index);
}
inline void FlushRequest::set_collection_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushRequest.collection_names)
  collection_names_.Mutable(index)->assign(value);
}
inline void FlushRequest::set_collection_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushRequest.collection_names)
  collection_names_.Mutable(index)->assign(std::move(value));
}
inline void FlushRequest::set_collection_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::set_collection_names(int index, const char* value, size_t size) {
  collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.FlushRequest.collection_names)
}
inline std::string* FlushRequest::add_collection_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.FlushRequest.collection_names)
  return collection_names_.Add();
}
inline void FlushRequest::add_collection_names(const std::string& value) {
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::add_collection_names(std::string&& value) {
  collection_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::add_collection_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::add_collection_names(const char* value, size_t size) {
  collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.FlushRequest.collection_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FlushRequest::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.FlushRequest.collection_names)
  return collection_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FlushRequest::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.FlushRequest.collection_names)
  return &collection_names_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlushResponse

// .milvus.proto.common.Status status = 1;
inline bool FlushResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& FlushResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* FlushResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* FlushResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushResponse.status)
  return status_;
}
inline void FlushResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushResponse.status)
}

// string db_name = 2;
inline void FlushResponse::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FlushResponse::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushResponse.db_name)
  return db_name_.GetNoArena();
}
inline void FlushResponse::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushResponse.db_name)
}
inline void FlushResponse::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.FlushResponse.db_name)
}
inline void FlushResponse::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.FlushResponse.db_name)
}
inline void FlushResponse::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.FlushResponse.db_name)
}
inline std::string* FlushResponse::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushResponse.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FlushResponse::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushResponse.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FlushResponse::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushResponse.db_name)
}

// map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
inline int FlushResponse::coll_segids_size() const {
  return coll_segids_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
FlushResponse::coll_segids() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.FlushResponse.coll_segIDs)
  return coll_segids_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
FlushResponse::mutable_coll_segids() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.FlushResponse.coll_segIDs)
  return coll_segids_.MutableMap();
}

// -------------------------------------------------------------------

// QueryRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool QueryRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& QueryRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* QueryRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* QueryRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.base)
  return base_;
}
inline void QueryRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.base)
}

// string db_name = 2;
inline void QueryRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.db_name)
  return db_name_.GetNoArena();
}
inline void QueryRequest::set_db_name(const std::string& value) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.db_name)
}
inline void QueryRequest::set_db_name(std::string&& value) {
  
  db_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.QueryRequest.db_name)
}
inline void QueryRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.db_name)
}
inline void QueryRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.db_name)
}
inline std::string* QueryRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.db_name)
  return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.db_name)
}

// string collection_name = 3;
inline void QueryRequest::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.collection_name)
  return collection_name_.GetNoArena();
}
inline void QueryRequest::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.collection_name)
}
inline void QueryRequest::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.QueryRequest.collection_name)
}
inline void QueryRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.collection_name)
}
inline void QueryRequest::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.collection_name)
}
inline std::string* QueryRequest::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.collection_name)
}

// string expr = 4;
inline void QueryRequest::clear_expr() {
  expr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::expr() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.expr)
  return expr_.GetNoArena();
}
inline void QueryRequest::set_expr(const std::string& value) {
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.expr)
}
inline void QueryRequest::set_expr(std::string&& value) {
  
  expr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.QueryRequest.expr)
}
inline void QueryRequest::set_expr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.expr)
}
inline void QueryRequest::set_expr(const char* value, size_t size) {
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.expr)
}
inline std::string* QueryRequest::mutable_expr() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.expr)
  return expr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_expr() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.expr)
  
  return expr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_expr(std::string* expr) {
  if (expr != nullptr) {
    
  } else {
    
  }
  expr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expr);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.expr)
}

// repeated string output_fields = 5;
inline int QueryRequest::output_fields_size() const {
  return output_fields_.size();
}
inline void QueryRequest::clear_output_fields() {
  output_fields_.Clear();
}
inline const std::string& QueryRequest::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.output_fields)
  return output_fields_.Get(index);
}
inline std::string* QueryRequest::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.output_fields)
  return output_fields_.Mutable(index);
}
inline void QueryRequest::set_output_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.output_fields)
  output_fields_.Mutable(index)->assign(value);
}
inline void QueryRequest::set_output_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.output_fields)
  output_fields_.Mutable(index)->assign(std::move(value));
}
inline void QueryRequest::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::set_output_fields(int index, const char* value, size_t size) {
  output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.output_fields)
}
inline std::string* QueryRequest::add_output_fields() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.QueryRequest.output_fields)
  return output_fields_.Add();
}
inline void QueryRequest::add_output_fields(const std::string& value) {
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::add_output_fields(std::string&& value) {
  output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::add_output_fields(const char* value, size_t size) {
  output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.QueryRequest.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRequest::output_fields() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryRequest.output_fields)
  return output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRequest::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryRequest.output_fields)
  return &output_fields_;
}

// repeated string partition_names = 6;
inline int QueryRequest::partition_names_size() const {
  return partition_names_.size();
}
inline void QueryRequest::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& QueryRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.partition_names)
  return partition_names_.Get(index);
}
inline std::string* QueryRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.partition_names)
  return partition_names_.Mutable(index);
}
inline void QueryRequest::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void QueryRequest::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void QueryRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.partition_names)
}
inline std::string* QueryRequest::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.QueryRequest.partition_names)
  return partition_names_.Add();
}
inline void QueryRequest::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.QueryRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryRequest.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryRequest.partition_names)
  return &partition_names_;
}

// uint64 travel_timestamp = 7;
inline void QueryRequest::clear_travel_timestamp() {
  travel_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.travel_timestamp)
  return travel_timestamp_;
}
inline void QueryRequest::set_travel_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  travel_timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 8;
inline void QueryRequest::clear_guarantee_timestamp() {
  guarantee_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.guarantee_timestamp)
  return guarantee_timestamp_;
}
inline void QueryRequest::set_guarantee_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guarantee_timestamp_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.guarantee_timestamp)
}

// -------------------------------------------------------------------

// QueryResults

// .milvus.proto.common.Status status = 1;
inline bool QueryResults::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& QueryResults::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* QueryResults::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryResults.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* QueryResults::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.status)
  return status_;
}
inline void QueryResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryResults.status)
}

// repeated .milvus.proto.schema.FieldData fields_data = 2;
inline int QueryResults::fields_data_size() const {
  return fields_data_.size();
}
inline ::milvus::proto::schema::FieldData* QueryResults::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.fields_data)
  return fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
QueryResults::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryResults.fields_data)
  return &fields_data_;
}
inline const ::milvus::proto::schema::FieldData& QueryResults::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.fields_data)
  return fields_data_.Get(index);
}
inline ::milvus::proto::schema::FieldData* QueryResults::add_fields_data() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryResults.fields_data)
  return fields_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
QueryResults::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryResults.fields_data)
  return fields_data_;
}

// string collection_name = 3;
inline void QueryResults::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryResults::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.collection_name)
  return collection_name_.GetNoArena();
}
inline void QueryResults::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryResults.collection_name)
}
inline void QueryResults::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.QueryResults.collection_name)
}
inline void QueryResults::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryResults.collection_name)
}
inline void QueryResults::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryResults.collection_name)
}
inline std::string* QueryResults::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryResults::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryResults.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResults::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryResults.collection_name)
}

// -------------------------------------------------------------------

// VectorIDs

// string collection_name = 1;
inline void VectorIDs::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorIDs::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.collection_name)
  return collection_name_.GetNoArena();
}
inline void VectorIDs::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.collection_name)
}
inline void VectorIDs::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.VectorIDs.collection_name)
}
inline void VectorIDs::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.VectorIDs.collection_name)
}
inline void VectorIDs::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.VectorIDs.collection_name)
}
inline std::string* VectorIDs::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorIDs::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorIDs.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorIDs::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorIDs.collection_name)
}

// string field_name = 2;
inline void VectorIDs::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorIDs::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.field_name)
  return field_name_.GetNoArena();
}
inline void VectorIDs::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.field_name)
}
inline void VectorIDs::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.VectorIDs.field_name)
}
inline void VectorIDs::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.VectorIDs.field_name)
}
inline void VectorIDs::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.VectorIDs.field_name)
}
inline std::string* VectorIDs::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorIDs::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorIDs.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorIDs::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorIDs.field_name)
}

// .milvus.proto.schema.IDs id_array = 3;
inline bool VectorIDs::has_id_array() const {
  return this != internal_default_instance() && id_array_ != nullptr;
}
inline const ::milvus::proto::schema::IDs& VectorIDs::id_array() const {
  const ::milvus::proto::schema::IDs* p = id_array_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.id_array)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::schema::IDs*>(
      &::milvus::proto::schema::_IDs_default_instance_);
}
inline ::milvus::proto::schema::IDs* VectorIDs::release_id_array() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorIDs.id_array)
  
  ::milvus::proto::schema::IDs* temp = id_array_;
  id_array_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* VectorIDs::mutable_id_array() {
  
  if (id_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaNoVirtual());
    id_array_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.id_array)
  return id_array_;
}
inline void VectorIDs::set_allocated_id_array(::milvus::proto::schema::IDs* id_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_array_);
  }
  if (id_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_array, submessage_arena);
    }
    
  } else {
    
  }
  id_array_ = id_array;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorIDs.id_array)
}

// repeated string partition_names = 4;
inline int VectorIDs::partition_names_size() const {
  return partition_names_.size();
}
inline void VectorIDs::clear_partition_names() {
  partition_names_.Clear();
}
inline const std::string& VectorIDs::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.partition_names)
  return partition_names_.Get(index);
}
inline std::string* VectorIDs::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.partition_names)
  return partition_names_.Mutable(index);
}
inline void VectorIDs::set_partition_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.partition_names)
  partition_names_.Mutable(index)->assign(value);
}
inline void VectorIDs::set_partition_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.partition_names)
  partition_names_.Mutable(index)->assign(std::move(value));
}
inline void VectorIDs::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::set_partition_names(int index, const char* value, size_t size) {
  partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.VectorIDs.partition_names)
}
inline std::string* VectorIDs::add_partition_names() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.VectorIDs.partition_names)
  return partition_names_.Add();
}
inline void VectorIDs::add_partition_names(const std::string& value) {
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::add_partition_names(std::string&& value) {
  partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::add_partition_names(const char* value, size_t size) {
  partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.VectorIDs.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VectorIDs::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.VectorIDs.partition_names)
  return partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VectorIDs::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.VectorIDs.partition_names)
  return &partition_names_;
}

// -------------------------------------------------------------------

// VectorsArray

// .milvus.proto.milvus.VectorIDs id_array = 1;
inline bool VectorsArray::has_id_array() const {
  return array_case() == kIdArray;
}
inline void VectorsArray::set_has_id_array() {
  _oneof_case_[0] = kIdArray;
}
inline void VectorsArray::clear_id_array() {
  if (has_id_array()) {
    delete array_.id_array_;
    clear_has_array();
  }
}
inline ::milvus::proto::milvus::VectorIDs* VectorsArray::release_id_array() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorsArray.id_array)
  if (has_id_array()) {
    clear_has_array();
      ::milvus::proto::milvus::VectorIDs* temp = array_.id_array_;
    array_.id_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::milvus::VectorIDs& VectorsArray::id_array() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorsArray.id_array)
  return has_id_array()
      ? *array_.id_array_
      : *reinterpret_cast< ::milvus::proto::milvus::VectorIDs*>(&::milvus::proto::milvus::_VectorIDs_default_instance_);
}
inline ::milvus::proto::milvus::VectorIDs* VectorsArray::mutable_id_array() {
  if (!has_id_array()) {
    clear_array();
    set_has_id_array();
    array_.id_array_ = CreateMaybeMessage< ::milvus::proto::milvus::VectorIDs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorsArray.id_array)
  return array_.id_array_;
}

// .milvus.proto.schema.VectorField data_array = 2;
inline bool VectorsArray::has_data_array() const {
  return array_case() == kDataArray;
}
inline void VectorsArray::set_has_data_array() {
  _oneof_case_[0] = kDataArray;
}
inline ::milvus::proto::schema::VectorField* VectorsArray::release_data_array() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorsArray.data_array)
  if (has_data_array()) {
    clear_has_array();
      ::milvus::proto::schema::VectorField* temp = array_.data_array_;
    array_.data_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::schema::VectorField& VectorsArray::data_array() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorsArray.data_array)
  return has_data_array()
      ? *array_.data_array_
      : *reinterpret_cast< ::milvus::proto::schema::VectorField*>(&::milvus::proto::schema::_VectorField_default_instance_);
}
inline ::milvus::proto::schema::VectorField* VectorsArray::mutable_data_array() {
  if (!has_data_array()) {
    clear_array();
    set_has_data_array();
    array_.data_array_ = CreateMaybeMessage< ::milvus::proto::schema::VectorField >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorsArray.data_array)
  return array_.data_array_;
}

inline bool VectorsArray::has_array() const {
  return array_case() != ARRAY_NOT_SET;
}
inline void VectorsArray::clear_has_array() {
  _oneof_case_[0] = ARRAY_NOT_SET;
}
inline VectorsArray::ArrayCase VectorsArray::array_case() const {
  return VectorsArray::ArrayCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CalcDistanceRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CalcDistanceRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& CalcDistanceRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* CalcDistanceRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CalcDistanceRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.base)
  return base_;
}
inline void CalcDistanceRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceRequest.base)
}

// .milvus.proto.milvus.VectorsArray op_left = 2;
inline bool CalcDistanceRequest::has_op_left() const {
  return this != internal_default_instance() && op_left_ != nullptr;
}
inline void CalcDistanceRequest::clear_op_left() {
  if (GetArenaNoVirtual() == nullptr && op_left_ != nullptr) {
    delete op_left_;
  }
  op_left_ = nullptr;
}
inline const ::milvus::proto::milvus::VectorsArray& CalcDistanceRequest::op_left() const {
  const ::milvus::proto::milvus::VectorsArray* p = op_left_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.op_left)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::milvus::VectorsArray*>(
      &::milvus::proto::milvus::_VectorsArray_default_instance_);
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::release_op_left() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceRequest.op_left)
  
  ::milvus::proto::milvus::VectorsArray* temp = op_left_;
  op_left_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::mutable_op_left() {
  
  if (op_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::VectorsArray>(GetArenaNoVirtual());
    op_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.op_left)
  return op_left_;
}
inline void CalcDistanceRequest::set_allocated_op_left(::milvus::proto::milvus::VectorsArray* op_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_left_;
  }
  if (op_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_left, submessage_arena);
    }
    
  } else {
    
  }
  op_left_ = op_left;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceRequest.op_left)
}

// .milvus.proto.milvus.VectorsArray op_right = 3;
inline bool CalcDistanceRequest::has_op_right() const {
  return this != internal_default_instance() && op_right_ != nullptr;
}
inline void CalcDistanceRequest::clear_op_right() {
  if (GetArenaNoVirtual() == nullptr && op_right_ != nullptr) {
    delete op_right_;
  }
  op_right_ = nullptr;
}
inline const ::milvus::proto::milvus::VectorsArray& CalcDistanceRequest::op_right() const {
  const ::milvus::proto::milvus::VectorsArray* p = op_right_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.op_right)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::milvus::VectorsArray*>(
      &::milvus::proto::milvus::_VectorsArray_default_instance_);
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::release_op_right() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceRequest.op_right)
  
  ::milvus::proto::milvus::VectorsArray* temp = op_right_;
  op_right_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::mutable_op_right() {
  
  if (op_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::VectorsArray>(GetArenaNoVirtual());
    op_right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.op_right)
  return op_right_;
}
inline void CalcDistanceRequest::set_allocated_op_right(::milvus::proto::milvus::VectorsArray* op_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_right_;
  }
  if (op_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_right, submessage_arena);
    }
    
  } else {
    
  }
  op_right_ = op_right;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceRequest.op_right)
}

// repeated .milvus.proto.common.KeyValuePair params = 4;
inline int CalcDistanceRequest::params_size() const {
  return params_.size();
}
inline ::milvus::proto::common::KeyValuePair* CalcDistanceRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CalcDistanceRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CalcDistanceRequest.params)
  return &params_;
}
inline const ::milvus::proto::common::KeyValuePair& CalcDistanceRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.params)
  return params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* CalcDistanceRequest::add_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CalcDistanceRequest.params)
  return params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CalcDistanceRequest::params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CalcDistanceRequest.params)
  return params_;
}

// -------------------------------------------------------------------

// CalcDistanceResults

// .milvus.proto.common.Status status = 1;
inline bool CalcDistanceResults::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& CalcDistanceResults::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceResults.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* CalcDistanceResults::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceResults.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* CalcDistanceResults::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceResults.status)
  return status_;
}
inline void CalcDistanceResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceResults.status)
}

// .milvus.proto.schema.IntArray int_dist = 2;
inline bool CalcDistanceResults::has_int_dist() const {
  return array_case() == kIntDist;
}
inline void CalcDistanceResults::set_has_int_dist() {
  _oneof_case_[0] = kIntDist;
}
inline ::milvus::proto::schema::IntArray* CalcDistanceResults::release_int_dist() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceResults.int_dist)
  if (has_int_dist()) {
    clear_has_array();
      ::milvus::proto::schema::IntArray* temp = array_.int_dist_;
    array_.int_dist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::schema::IntArray& CalcDistanceResults::int_dist() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceResults.int_dist)
  return has_int_dist()
      ? *array_.int_dist_
      : *reinterpret_cast< ::milvus::proto::schema::IntArray*>(&::milvus::proto::schema::_IntArray_default_instance_);
}
inline ::milvus::proto::schema::IntArray* CalcDistanceResults::mutable_int_dist() {
  if (!has_int_dist()) {
    clear_array();
    set_has_int_dist();
    array_.int_dist_ = CreateMaybeMessage< ::milvus::proto::schema::IntArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceResults.int_dist)
  return array_.int_dist_;
}

// .milvus.proto.schema.FloatArray float_dist = 3;
inline bool CalcDistanceResults::has_float_dist() const {
  return array_case() == kFloatDist;
}
inline void CalcDistanceResults::set_has_float_dist() {
  _oneof_case_[0] = kFloatDist;
}
inline ::milvus::proto::schema::FloatArray* CalcDistanceResults::release_float_dist() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceResults.float_dist)
  if (has_float_dist()) {
    clear_has_array();
      ::milvus::proto::schema::FloatArray* temp = array_.float_dist_;
    array_.float_dist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::schema::FloatArray& CalcDistanceResults::float_dist() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceResults.float_dist)
  return has_float_dist()
      ? *array_.float_dist_
      : *reinterpret_cast< ::milvus::proto::schema::FloatArray*>(&::milvus::proto::schema::_FloatArray_default_instance_);
}
inline ::milvus::proto::schema::FloatArray* CalcDistanceResults::mutable_float_dist() {
  if (!has_float_dist()) {
    clear_array();
    set_has_float_dist();
    array_.float_dist_ = CreateMaybeMessage< ::milvus::proto::schema::FloatArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceResults.float_dist)
  return array_.float_dist_;
}

inline bool CalcDistanceResults::has_array() const {
  return array_case() != ARRAY_NOT_SET;
}
inline void CalcDistanceResults::clear_has_array() {
  _oneof_case_[0] = ARRAY_NOT_SET;
}
inline CalcDistanceResults::ArrayCase CalcDistanceResults::array_case() const {
  return CalcDistanceResults::ArrayCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PersistentSegmentInfo

// int64 segmentID = 1;
inline void PersistentSegmentInfo::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentSegmentInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.segmentID)
  return segmentid_;
}
inline void PersistentSegmentInfo::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.segmentID)
}

// int64 collectionID = 2;
inline void PersistentSegmentInfo::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentSegmentInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.collectionID)
  return collectionid_;
}
inline void PersistentSegmentInfo::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.collectionID)
}

// int64 partitionID = 3;
inline void PersistentSegmentInfo::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentSegmentInfo::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.partitionID)
  return partitionid_;
}
inline void PersistentSegmentInfo::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.partitionID)
}

// int64 num_rows = 4;
inline void PersistentSegmentInfo::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentSegmentInfo::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.num_rows)
  return num_rows_;
}
inline void PersistentSegmentInfo::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.num_rows)
}

// .milvus.proto.common.SegmentState state = 5;
inline void PersistentSegmentInfo::clear_state() {
  state_ = 0;
}
inline ::milvus::proto::common::SegmentState PersistentSegmentInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.state)
  return static_cast< ::milvus::proto::common::SegmentState >(state_);
}
inline void PersistentSegmentInfo::set_state(::milvus::proto::common::SegmentState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.state)
}

// -------------------------------------------------------------------

// GetPersistentSegmentInfoRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetPersistentSegmentInfoRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetPersistentSegmentInfoRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetPersistentSegmentInfoRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPersistentSegmentInfoRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
  return base_;
}
inline void GetPersistentSegmentInfoRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
}

// string dbName = 2;
inline void GetPersistentSegmentInfoRequest::clear_dbname() {
  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPersistentSegmentInfoRequest::dbname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
  return dbname_.GetNoArena();
}
inline void GetPersistentSegmentInfoRequest::set_dbname(const std::string& value) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}
inline void GetPersistentSegmentInfoRequest::set_dbname(std::string&& value) {
  
  dbname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}
inline void GetPersistentSegmentInfoRequest::set_dbname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}
inline void GetPersistentSegmentInfoRequest::set_dbname(const char* value, size_t size) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}
inline std::string* GetPersistentSegmentInfoRequest::mutable_dbname() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
  return dbname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPersistentSegmentInfoRequest::release_dbname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
  
  return dbname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersistentSegmentInfoRequest::set_allocated_dbname(std::string* dbname) {
  if (dbname != nullptr) {
    
  } else {
    
  }
  dbname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbname);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}

// string collectionName = 3;
inline void GetPersistentSegmentInfoRequest::clear_collectionname() {
  collectionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPersistentSegmentInfoRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
  return collectionname_.GetNoArena();
}
inline void GetPersistentSegmentInfoRequest::set_collectionname(const std::string& value) {
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}
inline void GetPersistentSegmentInfoRequest::set_collectionname(std::string&& value) {
  
  collectionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}
inline void GetPersistentSegmentInfoRequest::set_collectionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}
inline void GetPersistentSegmentInfoRequest::set_collectionname(const char* value, size_t size) {
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}
inline std::string* GetPersistentSegmentInfoRequest::mutable_collectionname() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
  return collectionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPersistentSegmentInfoRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
  
  return collectionname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPersistentSegmentInfoRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionname);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}

// -------------------------------------------------------------------

// GetPersistentSegmentInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetPersistentSegmentInfoResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetPersistentSegmentInfoResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetPersistentSegmentInfoResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetPersistentSegmentInfoResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
  return status_;
}
inline void GetPersistentSegmentInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
}

// repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
inline int GetPersistentSegmentInfoResponse::infos_size() const {
  return infos_.size();
}
inline void GetPersistentSegmentInfoResponse::clear_infos() {
  infos_.Clear();
}
inline ::milvus::proto::milvus::PersistentSegmentInfo* GetPersistentSegmentInfoResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >*
GetPersistentSegmentInfoResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return &infos_;
}
inline const ::milvus::proto::milvus::PersistentSegmentInfo& GetPersistentSegmentInfoResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return infos_.Get(index);
}
inline ::milvus::proto::milvus::PersistentSegmentInfo* GetPersistentSegmentInfoResponse::add_infos() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >&
GetPersistentSegmentInfoResponse::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return infos_;
}

// -------------------------------------------------------------------

// QuerySegmentInfo

// int64 segmentID = 1;
inline void QuerySegmentInfo::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.segmentID)
  return segmentid_;
}
inline void QuerySegmentInfo::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.segmentID)
}

// int64 collectionID = 2;
inline void QuerySegmentInfo::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.collectionID)
  return collectionid_;
}
inline void QuerySegmentInfo::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.collectionID)
}

// int64 partitionID = 3;
inline void QuerySegmentInfo::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.partitionID)
  return partitionid_;
}
inline void QuerySegmentInfo::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.partitionID)
}

// int64 mem_size = 4;
inline void QuerySegmentInfo::clear_mem_size() {
  mem_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::mem_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.mem_size)
  return mem_size_;
}
inline void QuerySegmentInfo::set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mem_size_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.mem_size)
}

// int64 num_rows = 5;
inline void QuerySegmentInfo::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.num_rows)
  return num_rows_;
}
inline void QuerySegmentInfo::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.num_rows)
}

// string index_name = 6;
inline void QuerySegmentInfo::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuerySegmentInfo::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.index_name)
  return index_name_.GetNoArena();
}
inline void QuerySegmentInfo::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.index_name)
}
inline void QuerySegmentInfo::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.QuerySegmentInfo.index_name)
}
inline void QuerySegmentInfo::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QuerySegmentInfo.index_name)
}
inline void QuerySegmentInfo::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QuerySegmentInfo.index_name)
}
inline std::string* QuerySegmentInfo::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QuerySegmentInfo.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuerySegmentInfo::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QuerySegmentInfo.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuerySegmentInfo::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QuerySegmentInfo.index_name)
}

// int64 indexID = 7;
inline void QuerySegmentInfo::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.indexID)
  return indexid_;
}
inline void QuerySegmentInfo::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.indexID)
}

// int64 nodeID = 8;
inline void QuerySegmentInfo::clear_nodeid() {
  nodeid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuerySegmentInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.nodeID)
  return nodeid_;
}
inline void QuerySegmentInfo::set_nodeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.nodeID)
}

// .milvus.proto.common.SegmentState state = 9;
inline void QuerySegmentInfo::clear_state() {
  state_ = 0;
}
inline ::milvus::proto::common::SegmentState QuerySegmentInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.state)
  return static_cast< ::milvus::proto::common::SegmentState >(state_);
}
inline void QuerySegmentInfo::set_state(::milvus::proto::common::SegmentState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.state)
}

// -------------------------------------------------------------------

// GetQuerySegmentInfoRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetQuerySegmentInfoRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetQuerySegmentInfoRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetQuerySegmentInfoRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetQuerySegmentInfoRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
  return base_;
}
inline void GetQuerySegmentInfoRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
}

// string dbName = 2;
inline void GetQuerySegmentInfoRequest::clear_dbname() {
  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetQuerySegmentInfoRequest::dbname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
  return dbname_.GetNoArena();
}
inline void GetQuerySegmentInfoRequest::set_dbname(const std::string& value) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}
inline void GetQuerySegmentInfoRequest::set_dbname(std::string&& value) {
  
  dbname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}
inline void GetQuerySegmentInfoRequest::set_dbname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}
inline void GetQuerySegmentInfoRequest::set_dbname(const char* value, size_t size) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}
inline std::string* GetQuerySegmentInfoRequest::mutable_dbname() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
  return dbname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetQuerySegmentInfoRequest::release_dbname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
  
  return dbname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetQuerySegmentInfoRequest::set_allocated_dbname(std::string* dbname) {
  if (dbname != nullptr) {
    
  } else {
    
  }
  dbname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbname);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}

// string collectionName = 3;
inline void GetQuerySegmentInfoRequest::clear_collectionname() {
  collectionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetQuerySegmentInfoRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
  return collectionname_.GetNoArena();
}
inline void GetQuerySegmentInfoRequest::set_collectionname(const std::string& value) {
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}
inline void GetQuerySegmentInfoRequest::set_collectionname(std::string&& value) {
  
  collectionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}
inline void GetQuerySegmentInfoRequest::set_collectionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}
inline void GetQuerySegmentInfoRequest::set_collectionname(const char* value, size_t size) {
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}
inline std::string* GetQuerySegmentInfoRequest::mutable_collectionname() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
  return collectionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetQuerySegmentInfoRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
  
  return collectionname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetQuerySegmentInfoRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionname);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}

// -------------------------------------------------------------------

// GetQuerySegmentInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetQuerySegmentInfoResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetQuerySegmentInfoResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetQuerySegmentInfoResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetQuerySegmentInfoResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
  return status_;
}
inline void GetQuerySegmentInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
}

// repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
inline int GetQuerySegmentInfoResponse::infos_size() const {
  return infos_.size();
}
inline void GetQuerySegmentInfoResponse::clear_infos() {
  infos_.Clear();
}
inline ::milvus::proto::milvus::QuerySegmentInfo* GetQuerySegmentInfoResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >*
GetQuerySegmentInfoResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return &infos_;
}
inline const ::milvus::proto::milvus::QuerySegmentInfo& GetQuerySegmentInfoResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return infos_.Get(index);
}
inline ::milvus::proto::milvus::QuerySegmentInfo* GetQuerySegmentInfoResponse::add_infos() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >&
GetQuerySegmentInfoResponse::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return infos_;
}

// -------------------------------------------------------------------

// DummyRequest

// string request_type = 1;
inline void DummyRequest::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DummyRequest::request_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DummyRequest.request_type)
  return request_type_.GetNoArena();
}
inline void DummyRequest::set_request_type(const std::string& value) {
  
  request_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DummyRequest.request_type)
}
inline void DummyRequest::set_request_type(std::string&& value) {
  
  request_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DummyRequest.request_type)
}
inline void DummyRequest::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DummyRequest.request_type)
}
inline void DummyRequest::set_request_type(const char* value, size_t size) {
  
  request_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DummyRequest.request_type)
}
inline std::string* DummyRequest::mutable_request_type() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DummyRequest.request_type)
  return request_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DummyRequest::release_request_type() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DummyRequest.request_type)
  
  return request_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DummyRequest::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  request_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DummyRequest.request_type)
}

// -------------------------------------------------------------------

// DummyResponse

// string response = 1;
inline void DummyResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DummyResponse::response() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DummyResponse.response)
  return response_.GetNoArena();
}
inline void DummyResponse::set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DummyResponse.response)
}
inline void DummyResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.DummyResponse.response)
}
inline void DummyResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DummyResponse.response)
}
inline void DummyResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DummyResponse.response)
}
inline std::string* DummyResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DummyResponse.response)
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DummyResponse::release_response() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DummyResponse.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DummyResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DummyResponse.response)
}

// -------------------------------------------------------------------

// RegisterLinkRequest

// -------------------------------------------------------------------

// RegisterLinkResponse

// .milvus.proto.common.Address address = 1;
inline bool RegisterLinkResponse::has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline const ::milvus::proto::common::Address& RegisterLinkResponse::address() const {
  const ::milvus::proto::common::Address* p = address_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RegisterLinkResponse.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Address*>(
      &::milvus::proto::common::_Address_default_instance_);
}
inline ::milvus::proto::common::Address* RegisterLinkResponse::release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RegisterLinkResponse.address)
  
  ::milvus::proto::common::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Address* RegisterLinkResponse::mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RegisterLinkResponse.address)
  return address_;
}
inline void RegisterLinkResponse::set_allocated_address(::milvus::proto::common::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RegisterLinkResponse.address)
}

// .milvus.proto.common.Status status = 2;
inline bool RegisterLinkResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& RegisterLinkResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RegisterLinkResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* RegisterLinkResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RegisterLinkResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* RegisterLinkResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RegisterLinkResponse.status)
  return status_;
}
inline void RegisterLinkResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RegisterLinkResponse.status)
}

// -------------------------------------------------------------------

// GetMetricsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetMetricsRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& GetMetricsRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* GetMetricsRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetMetricsRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsRequest.base)
  return base_;
}
inline void GetMetricsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsRequest.base)
}

// string request = 2;
inline void GetMetricsRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMetricsRequest::request() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsRequest.request)
  return request_.GetNoArena();
}
inline void GetMetricsRequest::set_request(const std::string& value) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetMetricsRequest.request)
}
inline void GetMetricsRequest::set_request(std::string&& value) {
  
  request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetMetricsRequest.request)
}
inline void GetMetricsRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetMetricsRequest.request)
}
inline void GetMetricsRequest::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetMetricsRequest.request)
}
inline std::string* GetMetricsRequest::mutable_request() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsRequest.request)
  return request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMetricsRequest::release_request() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsRequest.request)
  
  return request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsRequest.request)
}

// -------------------------------------------------------------------

// GetMetricsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetMetricsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetMetricsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetMetricsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetMetricsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsResponse.status)
  return status_;
}
inline void GetMetricsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsResponse.status)
}

// string response = 2;
inline void GetMetricsResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMetricsResponse::response() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsResponse.response)
  return response_.GetNoArena();
}
inline void GetMetricsResponse::set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetMetricsResponse.response)
}
inline void GetMetricsResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetMetricsResponse.response)
}
inline void GetMetricsResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetMetricsResponse.response)
}
inline void GetMetricsResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetMetricsResponse.response)
}
inline std::string* GetMetricsResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsResponse.response)
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMetricsResponse::release_response() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsResponse.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsResponse.response)
}

// string component_name = 3;
inline void GetMetricsResponse::clear_component_name() {
  component_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMetricsResponse::component_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsResponse.component_name)
  return component_name_.GetNoArena();
}
inline void GetMetricsResponse::set_component_name(const std::string& value) {
  
  component_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetMetricsResponse.component_name)
}
inline void GetMetricsResponse::set_component_name(std::string&& value) {
  
  component_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.milvus.GetMetricsResponse.component_name)
}
inline void GetMetricsResponse::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetMetricsResponse.component_name)
}
inline void GetMetricsResponse::set_component_name(const char* value, size_t size) {
  
  component_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetMetricsResponse.component_name)
}
inline std::string* GetMetricsResponse::mutable_component_name() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsResponse.component_name)
  return component_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMetricsResponse::release_component_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsResponse.component_name)
  
  return component_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsResponse::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsResponse.component_name)
}

// -------------------------------------------------------------------

// LoadBalanceRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadBalanceRequest::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::milvus::proto::common::MsgBase& LoadBalanceRequest::base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline ::milvus::proto::common::MsgBase* LoadBalanceRequest::release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadBalanceRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadBalanceRequest::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadBalanceRequest.base)
  return base_;
}
inline void LoadBalanceRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadBalanceRequest.base)
}

// int64 src_nodeID = 2;
inline void LoadBalanceRequest::clear_src_nodeid() {
  src_nodeid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadBalanceRequest::src_nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.src_nodeID)
  return src_nodeid_;
}
inline void LoadBalanceRequest::set_src_nodeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  src_nodeid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.src_nodeID)
}

// repeated int64 dst_nodeIDs = 3;
inline int LoadBalanceRequest::dst_nodeids_size() const {
  return dst_nodeids_.size();
}
inline void LoadBalanceRequest::clear_dst_nodeids() {
  dst_nodeids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadBalanceRequest::dst_nodeids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
  return dst_nodeids_.Get(index);
}
inline void LoadBalanceRequest::set_dst_nodeids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dst_nodeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
}
inline void LoadBalanceRequest::add_dst_nodeids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dst_nodeids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LoadBalanceRequest::dst_nodeids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
  return dst_nodeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LoadBalanceRequest::mutable_dst_nodeids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
  return &dst_nodeids_;
}

// repeated int64 sealed_segmentIDs = 4;
inline int LoadBalanceRequest::sealed_segmentids_size() const {
  return sealed_segmentids_.size();
}
inline void LoadBalanceRequest::clear_sealed_segmentids() {
  sealed_segmentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadBalanceRequest::sealed_segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
  return sealed_segmentids_.Get(index);
}
inline void LoadBalanceRequest::set_sealed_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sealed_segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
}
inline void LoadBalanceRequest::add_sealed_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sealed_segmentids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LoadBalanceRequest::sealed_segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
  return sealed_segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LoadBalanceRequest::mutable_sealed_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
  return &sealed_segmentids_;
}

// -------------------------------------------------------------------

// ManualCompactionRequest

// int64 collectionID = 1;
inline void ManualCompactionRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManualCompactionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionRequest.collectionID)
  return collectionid_;
}
inline void ManualCompactionRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionRequest.collectionID)
}

// uint64 timetravel = 2;
inline void ManualCompactionRequest::clear_timetravel() {
  timetravel_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManualCompactionRequest::timetravel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionRequest.timetravel)
  return timetravel_;
}
inline void ManualCompactionRequest::set_timetravel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timetravel_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionRequest.timetravel)
}

// -------------------------------------------------------------------

// ManualCompactionResponse

// .milvus.proto.common.Status status = 1;
inline bool ManualCompactionResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& ManualCompactionResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* ManualCompactionResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ManualCompactionResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ManualCompactionResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ManualCompactionResponse.status)
  return status_;
}
inline void ManualCompactionResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ManualCompactionResponse.status)
}

// int64 compactionID = 2;
inline void ManualCompactionResponse::clear_compactionid() {
  compactionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManualCompactionResponse::compactionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionResponse.compactionID)
  return compactionid_;
}
inline void ManualCompactionResponse::set_compactionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compactionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionResponse.compactionID)
}

// -------------------------------------------------------------------

// GetCompactionStateRequest

// int64 compactionID = 1;
inline void GetCompactionStateRequest::clear_compactionid() {
  compactionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCompactionStateRequest::compactionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateRequest.compactionID)
  return compactionid_;
}
inline void GetCompactionStateRequest::set_compactionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compactionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateRequest.compactionID)
}

// -------------------------------------------------------------------

// GetCompactionStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetCompactionStateResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetCompactionStateResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetCompactionStateResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCompactionStateResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCompactionStateResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCompactionStateResponse.status)
  return status_;
}
inline void GetCompactionStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCompactionStateResponse.status)
}

// .milvus.proto.common.CompactionState state = 2;
inline void GetCompactionStateResponse::clear_state() {
  state_ = 0;
}
inline ::milvus::proto::common::CompactionState GetCompactionStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.state)
  return static_cast< ::milvus::proto::common::CompactionState >(state_);
}
inline void GetCompactionStateResponse::set_state(::milvus::proto::common::CompactionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.state)
}

// int64 executingPlanNo = 3;
inline void GetCompactionStateResponse::clear_executingplanno() {
  executingplanno_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCompactionStateResponse::executingplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.executingPlanNo)
  return executingplanno_;
}
inline void GetCompactionStateResponse::set_executingplanno(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  executingplanno_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.executingPlanNo)
}

// int64 timeoutPlanNo = 4;
inline void GetCompactionStateResponse::clear_timeoutplanno() {
  timeoutplanno_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCompactionStateResponse::timeoutplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.timeoutPlanNo)
  return timeoutplanno_;
}
inline void GetCompactionStateResponse::set_timeoutplanno(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timeoutplanno_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.timeoutPlanNo)
}

// int64 completedPlanNo = 5;
inline void GetCompactionStateResponse::clear_completedplanno() {
  completedplanno_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCompactionStateResponse::completedplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.completedPlanNo)
  return completedplanno_;
}
inline void GetCompactionStateResponse::set_completedplanno(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  completedplanno_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.completedPlanNo)
}

// -------------------------------------------------------------------

// GetCompactionPlansRequest

// int64 compactionID = 1;
inline void GetCompactionPlansRequest::clear_compactionid() {
  compactionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCompactionPlansRequest::compactionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansRequest.compactionID)
  return compactionid_;
}
inline void GetCompactionPlansRequest::set_compactionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compactionid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionPlansRequest.compactionID)
}

// -------------------------------------------------------------------

// GetCompactionPlansResponse

// .milvus.proto.common.Status status = 1;
inline bool GetCompactionPlansResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetCompactionPlansResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetCompactionPlansResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCompactionPlansResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCompactionPlansResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCompactionPlansResponse.status)
  return status_;
}
inline void GetCompactionPlansResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCompactionPlansResponse.status)
}

// .milvus.proto.common.CompactionState state = 2;
inline void GetCompactionPlansResponse::clear_state() {
  state_ = 0;
}
inline ::milvus::proto::common::CompactionState GetCompactionPlansResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansResponse.state)
  return static_cast< ::milvus::proto::common::CompactionState >(state_);
}
inline void GetCompactionPlansResponse::set_state(::milvus::proto::common::CompactionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionPlansResponse.state)
}

// repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
inline int GetCompactionPlansResponse::mergeinfos_size() const {
  return mergeinfos_.size();
}
inline void GetCompactionPlansResponse::clear_mergeinfos() {
  mergeinfos_.Clear();
}
inline ::milvus::proto::milvus::CompactionMergeInfo* GetCompactionPlansResponse::mutable_mergeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return mergeinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >*
GetCompactionPlansResponse::mutable_mergeinfos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return &mergeinfos_;
}
inline const ::milvus::proto::milvus::CompactionMergeInfo& GetCompactionPlansResponse::mergeinfos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return mergeinfos_.Get(index);
}
inline ::milvus::proto::milvus::CompactionMergeInfo* GetCompactionPlansResponse::add_mergeinfos() {
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return mergeinfos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >&
GetCompactionPlansResponse::mergeinfos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return mergeinfos_;
}

// -------------------------------------------------------------------

// CompactionMergeInfo

// repeated int64 sources = 1;
inline int CompactionMergeInfo::sources_size() const {
  return sources_.size();
}
inline void CompactionMergeInfo::clear_sources() {
  sources_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompactionMergeInfo::sources(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CompactionMergeInfo.sources)
  return sources_.Get(index);
}
inline void CompactionMergeInfo::set_sources(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sources_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CompactionMergeInfo.sources)
}
inline void CompactionMergeInfo::add_sources(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sources_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CompactionMergeInfo.sources)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CompactionMergeInfo::sources() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CompactionMergeInfo.sources)
  return sources_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CompactionMergeInfo::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CompactionMergeInfo.sources)
  return &sources_;
}

// int64 target = 2;
inline void CompactionMergeInfo::clear_target() {
  target_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompactionMergeInfo::target() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CompactionMergeInfo.target)
  return target_;
}
inline void CompactionMergeInfo::set_target(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CompactionMergeInfo.target)
}

// -------------------------------------------------------------------

// GetFlushStateRequest

// repeated int64 segmentIDs = 1;
inline int GetFlushStateRequest::segmentids_size() const {
  return segmentids_.size();
}
inline void GetFlushStateRequest::clear_segmentids() {
  segmentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFlushStateRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
  return segmentids_.Get(index);
}
inline void GetFlushStateRequest::set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
}
inline void GetFlushStateRequest::add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetFlushStateRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
  return segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetFlushStateRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
  return &segmentids_;
}

// -------------------------------------------------------------------

// GetFlushStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetFlushStateResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetFlushStateResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushStateResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetFlushStateResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetFlushStateResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushStateResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetFlushStateResponse.status)
  return status_;
}
inline void GetFlushStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetFlushStateResponse.status)
}

// bool flushed = 2;
inline void GetFlushStateResponse::clear_flushed() {
  flushed_ = false;
}
inline bool GetFlushStateResponse::flushed() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushStateResponse.flushed)
  return flushed_;
}
inline void GetFlushStateResponse::set_flushed(bool value) {
  
  flushed_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetFlushStateResponse.flushed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace milvus
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::milvus::ShowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::milvus::ShowType>() {
  return ::milvus::proto::milvus::ShowType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::milvus::PlaceholderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::milvus::PlaceholderType>() {
  return ::milvus::proto::milvus::PlaceholderType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto
