// Code generated by mockery v2.53.3. DO NOT EDIT.

package task

import mock "github.com/stretchr/testify/mock"

// MockGlobalScheduler is an autogenerated mock type for the GlobalScheduler type
type MockGlobalScheduler struct {
	mock.Mock
}

type MockGlobalScheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalScheduler) EXPECT() *MockGlobalScheduler_Expecter {
	return &MockGlobalScheduler_Expecter{mock: &_m.Mock}
}

// AbortAndRemoveTask provides a mock function with given fields: taskID
func (_m *MockGlobalScheduler) AbortAndRemoveTask(taskID int64) {
	_m.Called(taskID)
}

// MockGlobalScheduler_AbortAndRemoveTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortAndRemoveTask'
type MockGlobalScheduler_AbortAndRemoveTask_Call struct {
	*mock.Call
}

// AbortAndRemoveTask is a helper method to define mock.On call
//   - taskID int64
func (_e *MockGlobalScheduler_Expecter) AbortAndRemoveTask(taskID interface{}) *MockGlobalScheduler_AbortAndRemoveTask_Call {
	return &MockGlobalScheduler_AbortAndRemoveTask_Call{Call: _e.mock.On("AbortAndRemoveTask", taskID)}
}

func (_c *MockGlobalScheduler_AbortAndRemoveTask_Call) Run(run func(taskID int64)) *MockGlobalScheduler_AbortAndRemoveTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockGlobalScheduler_AbortAndRemoveTask_Call) Return() *MockGlobalScheduler_AbortAndRemoveTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGlobalScheduler_AbortAndRemoveTask_Call) RunAndReturn(run func(int64)) *MockGlobalScheduler_AbortAndRemoveTask_Call {
	_c.Run(run)
	return _c
}

// Enqueue provides a mock function with given fields: _a0
func (_m *MockGlobalScheduler) Enqueue(_a0 Task) {
	_m.Called(_a0)
}

// MockGlobalScheduler_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockGlobalScheduler_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - _a0 Task
func (_e *MockGlobalScheduler_Expecter) Enqueue(_a0 interface{}) *MockGlobalScheduler_Enqueue_Call {
	return &MockGlobalScheduler_Enqueue_Call{Call: _e.mock.On("Enqueue", _a0)}
}

func (_c *MockGlobalScheduler_Enqueue_Call) Run(run func(_a0 Task)) *MockGlobalScheduler_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Task))
	})
	return _c
}

func (_c *MockGlobalScheduler_Enqueue_Call) Return() *MockGlobalScheduler_Enqueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGlobalScheduler_Enqueue_Call) RunAndReturn(run func(Task)) *MockGlobalScheduler_Enqueue_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockGlobalScheduler) Start() {
	_m.Called()
}

// MockGlobalScheduler_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockGlobalScheduler_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockGlobalScheduler_Expecter) Start() *MockGlobalScheduler_Start_Call {
	return &MockGlobalScheduler_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockGlobalScheduler_Start_Call) Run(run func()) *MockGlobalScheduler_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalScheduler_Start_Call) Return() *MockGlobalScheduler_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGlobalScheduler_Start_Call) RunAndReturn(run func()) *MockGlobalScheduler_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockGlobalScheduler) Stop() {
	_m.Called()
}

// MockGlobalScheduler_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockGlobalScheduler_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockGlobalScheduler_Expecter) Stop() *MockGlobalScheduler_Stop_Call {
	return &MockGlobalScheduler_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockGlobalScheduler_Stop_Call) Run(run func()) *MockGlobalScheduler_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalScheduler_Stop_Call) Return() *MockGlobalScheduler_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGlobalScheduler_Stop_Call) RunAndReturn(run func()) *MockGlobalScheduler_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockGlobalScheduler creates a new instance of MockGlobalScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGlobalScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGlobalScheduler {
	mock := &MockGlobalScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
